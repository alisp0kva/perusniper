/* VARIABLES */

/* ROOM */

const roomName = 'OFI |Ardilla ❤️';
const maxPlayers = 30;
const roomPublic = true;

// GEOLOCALIZATION //
const geo = [{"code": "VE", "lat": 40, "lon": -3}];

var roomWebhook = 'https://discord.com/api/webhooks/1415735094521368637/XmVvYLxhkVGmh-kJ6TYWqpHg3tiatd1bDon4iQRMt-lzaqEhAZlnQ6ApmXzRSdb3cP_j'; // this webhook is used to send the details of the room (chat, join, leave) ; it should be in a private discord channel
var gameWebhook = 'https://discord.com/api/webhooks/1415734676487933982/b3AcBnv9aFSiM7FJwJBYLlf1QMwBi5mk_R4bpSm-B5IyB3XOfVj1_sUnsqjeqlMgDxjM'; // this webhook is used to send the summary of the games ; it should be in a public discord channel
var fetchRecordingVariable = true;
var timeLimit = 0;
var scoreLimit = 0;

var gameConfig = {
    roomName: roomName,
    maxPlayers: maxPlayers,
    public: roomPublic,
    noPlayer: true,
    geo: geo[0],
}

if (typeof token == 'string' && token.length == 39) {
    gameConfig.token = token;
}

var room = HBInit(gameConfig);

const trainingMap = '{ "name": "TRAINING", "width": 1300, "height": 635, "spawnDistance": 450, "redSpawnPoints": [], "blueSpawnPoints": [], "bg": { "type": "grass", "color": "434343", "cornerRadius": 0, "kickOffRadius": 0 }, "vertexes": [ { "x": -1200, "y": -600, "trait": "art", "color": "FFFFFF" }, { "x": 1200, "y": -600, "trait": "art", "color": "FFFFFF" }, { "x": -1200, "y": 600, "trait": "art", "color": "ffffff" }, { "x": 1200, "y": 600, "trait": "art", "color": "FFFFFF" }, { "x": -1202.1499112738336, "y": -111.61021879151879, "trait": "art", "color": "FFFFFF" }, { "x": 1200.506874322944, "y": -118.06119500598979, "bCoef": 0, "trait": "art", "color": "FFFFFF" }, { "x": 1200.4776077048039, "y": 125.3913992218282, "trait": "art", "color": "FFFFFF" }, { "x": -1200.5876644820403, "y": 127.39916980405829, "trait": "art", "color": "ffffff" }, { "x": -1244.4462512398322, "y": -111.24938957595486, "trait": "art", "color": "FFFFFF" }, { "x": -1243.5065241583238, "y": 126.54183098375651, "trait": "art", "color": "FFFFFF" }, { "x": 1246.752249708544, "y": -118.06119500598979, "bCoef": 0, "trait": "art", "color": "FFFFFF" }, { "x": 1245.1923111672038, "y": 124.3913992218282, "trait": "art", "color": "FFFFFF" }, { "x": 0, "y": -600, "trait": "art", "color": "ffffff" }, { "x": 0, "y": -191, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "curve": -180, "color": "ffffff" }, { "x": 0, "y": 191, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "curve": -180, "color": "FFFFFF" }, { "x": 0, "y": 600, "trait": "art", "color": "FFFFFF" }, { "x": -787, "y": -5, "trait": "art", "curve": -110, "color": "b3b6b6" }, { "x": -787, "y": 5, "trait": "art", "curve": -110, "color": "b3b6b6" }, { "x": 787, "y": 205, "trait": "art", "curve": -90, "color": "ffffff" }, { "x": -1075, "y": -470, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": -787, "y": -205, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": -787, "y": 205, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": 787, "y": -205, "trait": "art", "color": "ffffff", "curve": -90 }, { "x": -1075, "y": 470, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": -1206.5, "y": -600, "trait": "art" }, { "x": -1208.6499112738336, "y": -111.61021879151879, "trait": "art" }, { "x": 1543.25, "y": 644, "trait": "art" }, { "x": 1543.25, "y": 154, "trait": "art" }, { "x": -1206.5, "y": 600, "trait": "art" }, { "x": -1207.0876644820403, "y": 127.39916980405829, "trait": "art" }, { "x": 1206.5, "y": -600, "trait": "art" }, { "x": 1207.006874322944, "y": -118.06119500598979, "trait": "art" }, { "x": 1206.5, "y": 600, "trait": "art" }, { "x": 1206.9776077048039, "y": 125.3913992218282, "trait": "art" }, { "x": 0, "y": -635, "trait": "art" }, { "x": 0, "y": 635, "trait": "art", "color": "ffffff" }, { "x": -1204.1499112738336, "y": -111.61021879151879, "trait": "art" }, { "x": -1202.5876644820403, "y": 127.39916980405829, "trait": "art" }, { "x": 1202.506874322944, "y": -118.06119500598979, "trait": "art" }, { "x": 1202.4776077048039, "y": 125.3913992218282, "trait": "art" }, { "x": 1200.506874322944, "y": -118.06119500598979, "trait": "art", "color": "FFFFFF", "curve": 0 }, { "x": 1200.4776077048039, "y": 125.3913992218282, "trait": "art", "color": "FFFFFF", "curve": 0 }, { "x": -1200.1499112738336, "y": -111.61021879151879, "trait": "art" }, { "x": -1198.5876644820403, "y": 127.39916980405829, "trait": "art" }, { "x": -1250.3825749236507, "y": 133.8991698040583, "trait": "art" }, { "x": -1199.5876644820403, "y": 133.8991698040583, "trait": "art" }, { "x": -1243.8646147362335, "y": -118.11021879151879, "trait": "art" }, { "x": -1201.1499112738336, "y": -118.11021879151879, "trait": "art" }, { "x": 1201.506874322944, "y": -124.5611950059898, "trait": "art" }, { "x": 1252.506874322944, "y": -124.5611950059898, "trait": "art" }, { "x": 1200.4776077048039, "y": 131.89139922182818, "trait": "art" }, { "x": 1252.4776077048039, "y": 131.89139922182818, "trait": "art" }, { "x": -1202.1499112738336, "y": -111.61021879151879, "trait": "art", "color": "FFFFFF", "curve": 0 }, { "x": -1200.5876644820403, "y": 127.39916980405829, "trait": "art", "color": "FFFFFF", "curve": 0 }, { "x": 800, "y": 600, "trait": "art" }, { "x": -800, "y": 600, "trait": "art" }, { "x": 800, "y": -600, "trait": "art" }, { "x": 1200, "y": -250, "trait": "art" }, { "x": 1200, "y": 250, "trait": "art" }, { "x": 787, "y": -5, "trait": "art", "curve": -110, "color": "b3b6b6" }, { "x": 787, "y": 5, "trait": "art", "curve": -110, "color": "b3b6b6" }, { "x": -1200, "y": 470, "trait": "art", "color": "ffffff" }, { "x": -1075, "y": -470, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": -1200, "y": -470, "trait": "art", "color": "ffffff" }, { "x": 1075, "y": -470, "trait": "art", "color": "ffffff", "curve": -90 }, { "x": 1200, "y": -470, "trait": "art", "color": "ffffff" }, { "x": 1200, "y": 470, "trait": "art", "color": "ffffff", "curve": 90 }, { "x": 1075, "y": 470, "trait": "art", "curve": -90, "color": "ffffff" }, { "x": -1170, "y": -600, "trait": "art", "curve": 90 }, { "x": -1200, "y": -570, "trait": "art", "curve": 90 }, { "x": -1200, "y": 570, "trait": "art", "curve": 90 }, { "x": -1170, "y": 600, "trait": "art", "curve": 90 }, { "x": 1200, "y": 570, "trait": "art", "curve": -90 }, { "x": 1170, "y": 600, "trait": "art", "curve": -90 }, { "x": 1170, "y": -600, "trait": "art" }, { "x": 1200, "y": -570, "trait": "art" }, { "x": 662.54285134714, "y": -605.114461585585, "cMask": [ "wall" ], "color": "68686C", "curve": 0 }, { "x": 668.3671576305379, "y": 597.2175277903189, "cMask": [ "wall" ], "color": "68686C", "curve": 0 }, { "x": -660.6292814574492, "y": -602.1246929728202, "cMask": [ "wall" ] }, { "x": -655.1276624775651, "y": 597.1906041548658, "cMask": [ "wall" ] }, { "x": 1200.6684937547138, "y": -93.33197870414763, "trait": "art", "color": "0000ff" }, { "x": 1200.6684937547138, "y": -58.940616786317946, "trait": "art", "color": "0000ff" }, { "x": 1200.5975211155016, "y": -32.886737654012585, "trait": "art" }, { "x": 1200.5975211155016, "y": 0.4631934880846824, "trait": "art" }, { "x": 1200.5975211155016, "y": 94.49147156927559, "trait": "art" }, { "x": 1200.5975211155016, "y": 118.30385480669537, "trait": "art" }, { "x": 1200.5975211155016, "y": 27.328415796996374, "trait": "art" }, { "x": 1200.5975211155016, "y": 62.06792740334769, "trait": "art" }, { "x": -1202.0982680168963, "y": -88.06382817382206, "trait": "art", "color": "FF0000" }, { "x": -1201.9256970570664, "y": -52.85752066104202, "trait": "art", "color": "FF0000" }, { "x": -1201.5579991323943, "y": -25.39263757159286, "trait": "art" }, { "x": -1201.1291162730565, "y": 9.295957061697894, "trait": "art" }, { "x": -1201.0177302478924, "y": 34.577208608126455, "trait": "art" }, { "x": -1200.940654851475, "y": 70.15787958883958, "trait": "art" }, { "x": -1200.5975211155016, "y": 123.17580271137284, "trait": "art" }, { "x": -1200.5975211155016, "y": 96.80743900969901, "trait": "art" }, { "x": 62.585733882030176, "y": 132.03017832647458, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "1B1F21" }, { "x": 111.45404663923182, "y": -63.443072702331946, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "1B1F21" }, { "x": 123.45679012345678, "y": -61.72839506172839, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 99.45130315500685, "y": -116.59807956104251, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 108.02469135802468, "y": -125.17146776406035, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 54.01234567901234, "y": -115.74074074074073, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 48.86831275720165, "y": -130.31550068587106, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 67.72976680384087, "y": -100.30864197530865, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 59.15637860082304, "y": -89.16323731138546, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 77.16049382716047, "y": -51.440329218107, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 34.293552812071326, "y": 168.0384087791495, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 94.30727023319615, "y": -24.00548696844993, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 78.01783264746227, "y": -21.43347050754458, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 11.145404663923182, "y": -43.724279835390945, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 65.15775034293553, "y": -39.437585733882024, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 66.0150891632373, "y": -60.013717421124824, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 53.15500685871056, "y": -60.013717421124824, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 66.87242798353908, "y": -77.1604938271605, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 53.15500685871055, "y": -76.30315500685872, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 0.0264392960383677, "y": -93.95375898666009, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -1.3347270980291384, "y": -84.72622688264687, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -62.75720164609052, "y": 132.03017832647458, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "1B1F21" }, { "x": -111.75940019166806, "y": -63.443072702331946, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "1B1F21" }, { "x": -123.79502790461693, "y": -61.72839506172839, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -99.72377247871918, "y": -116.59807956104251, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -108.32064941653981, "y": -125.17146776406035, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -54.160324708269904, "y": -115.74074074074073, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -49.00219854557754, "y": -130.31550068587106, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -67.91532780878289, "y": -100.30864197530865, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -59.31845087096227, "y": -89.16323731138546, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -77.37189244038555, "y": -51.440329218107, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -34.38750775128248, "y": 168.0384087791495, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -94.56564631602681, "y": -24.00548696844993, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -78.23158013416764, "y": -21.43347050754458, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -11.175940019166806, "y": -43.724279835390945, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -65.33626472743671, "y": -39.437585733882024, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -66.19595242121876, "y": -60.013717421124824, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -53.30063701448784, "y": -60.013717421124824, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -67.05564011500083, "y": -77.1604938271605, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -53.30063701448783, "y": -76.30315500685872, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 1.3253316041080234, "y": -93.95375898666009, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -0.7164179869932361, "y": -84.72622688264688, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 80.58984910836762, "y": 172.32510288065842, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 106.31001371742111, "y": -156.89300411522632, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 136.31687242798353, "y": -130.31550068587106, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 114.02606310013716, "y": 151.74897119341563, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -80.34637524399189, "y": 172.32510288065842, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -105.98883542824461, "y": -156.89300411522632, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -135.90503897653946, "y": -130.31550068587106, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": -113.68157348352044, "y": 151.74897119341563, "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "x": 58.6561296336916, "y": 129.88763920745265, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 107.52444239089324, "y": -65.5856118213539, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 119.5271858751182, "y": -63.87093418075034, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 95.52169890666828, "y": -118.74061868006446, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 104.0950871096861, "y": -127.31400688308229, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 50.082741430673764, "y": -117.88327985976268, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 44.93870850886307, "y": -132.45803980489302, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 63.8001625555023, "y": -102.4511810943306, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 55.22677435248446, "y": -91.3057764304074, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 73.23088957882189, "y": -53.58286833712895, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 30.363948563732748, "y": 165.89586966012757, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 90.37766598485757, "y": -26.148026087471877, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 74.0882283991237, "y": -23.576009626566528, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 7.215800415584605, "y": -45.86681895441289, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 61.22814609459695, "y": -41.58012485290397, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 62.08548491489873, "y": -62.15625654014677, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 49.22540261037198, "y": -62.15625654014677, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 62.942823735200506, "y": -79.30303294618244, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 49.22540261037197, "y": -78.44569412588066, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -3.9031649523002097, "y": -96.09629810568204, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -5.264331346367716, "y": -86.86876600166882, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -66.6868058944291, "y": 129.88763920745265, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -115.68900444000664, "y": -65.5856118213539, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -127.72463215295551, "y": -63.87093418075034, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -103.65337672705776, "y": -118.74061868006446, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -112.25025366487839, "y": -127.31400688308229, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -58.08992895660848, "y": -117.88327985976268, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -52.93180279391612, "y": -132.45803980489302, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -71.84493205712147, "y": -102.4511810943306, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -63.24805511930085, "y": -91.3057764304074, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -81.30149668872413, "y": -53.58286833712895, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -38.317111999621055, "y": 165.89586966012757, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -98.49525056436539, "y": -26.148026087471877, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -82.16118438250622, "y": -23.576009626566528, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -15.105544267505383, "y": -45.86681895441289, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -69.26586897577529, "y": -41.58012485290397, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -70.12555666955734, "y": -62.15625654014677, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -57.23024126282642, "y": -62.15625654014677, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -70.9852443633394, "y": -79.30303294618244, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -57.23024126282641, "y": -78.44569412588066, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -2.604272644230554, "y": -96.09629810568204, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -4.646022235331814, "y": -86.86876600166883, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 76.66024486002904, "y": 170.18256376163646, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 102.38040946908254, "y": -159.03554323424828, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 132.38726817964496, "y": -132.45803980489302, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 110.09645885179859, "y": 149.6064320743937, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -84.27597949233046, "y": 170.18256376163646, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -109.91843967658319, "y": -159.03554323424828, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -139.83464322487802, "y": -132.45803980489302, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": -117.61117773185902, "y": 149.6064320743937, "cMask": [ "c3" ], "cGroup": [ "c3" ], "color": "6E7275" }, { "x": 0, "y": -191, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "curve": -180, "color": "434343" }, { "x": 0, "y": 191, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "curve": -180, "color": "D8DDFF" }, { "x": 1268.5439211502312, "y": 144.20229355281208, "color": "FFFFFF" }, { "x": -1268.5439211502312, "y": 145.36869355281206, "color": "FFFFFF" }, { "x": 1246.3623535925071, "y": -117.55080819053325, "color": "FFFFFF" }, { "x": 1270.1773208231123, "y": -136.6027819750173, "color": "FFFFFF" }, { "x": -1245.7008155219746, "y": -110.07981584128956, "color": "FFFFFF" }, { "x": -1271.2662539383662, "y": -129.71528002103577, "color": "FFFFFF" }, { "x": 0, "y": 191, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "art", "curve": -180, "color": "434343" }, { "x": 0, "y": -628.9735066420843, "color": "ffffff" } ], "segments": [ { "v0": 0, "v1": 1, "color": "FFFFFF", "trait": "parede" }, { "v0": 2, "v1": 3, "curve": 0.16421050268397877, "color": "FFFFFF", "trait": "parede" }, { "v0": 0, "v1": 4, "color": "FFFFFF", "trait": "parede" }, { "v0": 1, "v1": 5, "color": "FFFFFF", "trait": "parede" }, { "v0": 3, "v1": 6, "color": "FFFFFF", "trait": "parede" }, { "v0": 2, "v1": 7, "color": "ffffff", "trait": "parede" }, { "v0": 4, "v1": 8, "color": "FFFFFF", "trait": "gol" }, { "v0": 8, "v1": 9, "curve": 0.6303189156394209, "color": "FFFFFF", "trait": "gol", "x": -1252 }, { "v0": 9, "v1": 7, "color": "FFFFFF", "trait": "gol" }, { "v0": 5, "v1": 10, "color": "FFFFFF", "bCoef": 0, "trait": "gol" }, { "v0": 10, "v1": 11, "curve": -0.04538831174660091, "color": "FFFFFF", "trait": "gol", "x": 1252 }, { "v0": 11, "v1": 6, "color": "FFFFFF", "trait": "gol" }, { "v0": 16, "v1": 17, "curve": -180, "color": "b3b6b6", "trait": "art", "x": -787 }, { "v0": 16, "v1": 17, "curve": 180, "color": "b3b6b6", "trait": "art", "x": -787 }, { "v0": 16, "v1": 17, "curve": 110, "color": "b3b6b6", "trait": "art", "x": -787 }, { "v0": 16, "v1": 17, "curve": -110, "color": "b3b6b6", "trait": "art", "x": -787 }, { "v0": 19, "v1": 20, "curve": 90, "color": "ffffff", "trait": "art" }, { "v0": 20, "v1": 21, "curve": 0, "color": "ffffff", "trait": "art", "x": -787 }, { "v0": 18, "v1": 22, "curve": 0, "color": "ffffff", "trait": "art", "x": 787 }, { "v0": 21, "v1": 23, "curve": 90, "color": "ffffff", "trait": "art" }, { "v0": 24, "v1": 25, "vis": false, "cMask": [ "ball" ] }, { "v0": 28, "v1": 29, "vis": false, "cMask": [ "ball" ] }, { "v0": 30, "v1": 31, "vis": false, "cMask": [ "ball" ] }, { "v0": 32, "v1": 33, "vis": false, "cMask": [ "ball" ] }, { "v0": 12, "v1": 34, "vis": false, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ] }, { "v0": 15, "v1": 35, "vis": false, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ] }, { "v0": 40, "v1": 41, "curve": 0, "color": "FFFFFF", "cMask": [ "" ], "trait": "art", "x": 1200 }, { "v0": 44, "v1": 45, "vis": false, "cMask": [ "ball" ] }, { "v0": 46, "v1": 47, "vis": false, "cMask": [ "ball" ] }, { "v0": 48, "v1": 49, "vis": false, "cMask": [ "ball" ] }, { "v0": 50, "v1": 51, "vis": false, "cMask": [ "ball" ] }, { "v0": 52, "v1": 53, "curve": 0.18892878936995647, "color": "FFFFFF", "cMask": [ "" ], "trait": "art", "x": -1200 }, { "v0": 59, "v1": 60, "curve": -180, "color": "b3b6b6", "trait": "art", "x": 787 }, { "v0": 59, "v1": 60, "curve": 180, "color": "b3b6b6", "trait": "art", "x": 787 }, { "v0": 59, "v1": 60, "curve": 110, "color": "b3b6b6", "trait": "art", "x": 787 }, { "v0": 59, "v1": 60, "curve": -110, "color": "b3b6b6", "trait": "art", "x": 787 }, { "v0": 23, "v1": 61, "curve": 0, "color": "ffffff", "trait": "art" }, { "v0": 62, "v1": 63, "curve": 0, "color": "ffffff", "trait": "art", "y": -470 }, { "v0": 64, "v1": 65, "curve": 0, "color": "ffffff", "trait": "art", "y": -470 }, { "v0": 64, "v1": 22, "curve": -90, "color": "ffffff", "trait": "art" }, { "v0": 66, "v1": 67, "curve": 0, "color": "ffffff", "trait": "art" }, { "v0": 18, "v1": 67, "curve": -90, "color": "ffffff", "trait": "art" }, { "v0": 68, "v1": 69, "curve": 90, "color": "b3b6b6", "trait": "art" }, { "v0": 70, "v1": 71, "curve": 90, "color": "b3b6b6", "trait": "art" }, { "v0": 72, "v1": 73, "curve": -90, "color": "b3b6b6", "trait": "art" }, { "v0": 74, "v1": 75, "curve": -90, "color": "b3b6b6", "trait": "art" }, { "v0": 76, "v1": 77, "curve": 0, "color": "68686C", "cMask": [ "wall" ] }, { "v0": 78, "v1": 79, "curve": 0, "color": "68686C", "cMask": [ "wall" ] }, { "v0": 80, "v1": 81, "color": "0000ff", "trait": "art" }, { "v0": 82, "v1": 83, "color": "0000ff", "trait": "art" }, { "v0": 84, "v1": 85, "color": "0000ff", "trait": "art" }, { "v0": 86, "v1": 87, "color": "0000ff", "trait": "art" }, { "v0": 88, "v1": 89, "color": "FF0000", "trait": "art" }, { "v0": 90, "v1": 91, "color": "FF0000", "trait": "art" }, { "v0": 92, "v1": 93, "color": "FF0000", "trait": "art" }, { "v0": 94, "v1": 95, "color": "FF0000", "trait": "art" }, { "v0": 96, "v1": 97, "curve": -18.408787151896284, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 98, "v1": 96, "curve": 23.395465524309913, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 97, "v1": 99, "curve": -32.07584058572483, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 98, "v1": 100, "curve": -44.677436838726486, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 101, "v1": 99, "curve": 134.27732003261306, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 100, "v1": 102, "curve": -113.73236940220178, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 101, "v1": 103, "curve": -113.73236940220178, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 102, "v1": 104, "curve": -113.73236940220178, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 103, "v1": 105, "curve": 119.92546735645492, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 104, "v1": 105, "curve": 119.92546735645492, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 106, "v1": 107, "curve": -32.38297421940408, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 106, "v1": 108, "curve": -32.38297421940408, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 108, "v1": 109, "curve": -32.38297421940408, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 110, "v1": 109, "curve": -32.38297421940408, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 107, "v1": 111, "curve": 46.52361520809003, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 110, "v1": 112, "curve": 56.94840722014851, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 111, "v1": 113, "curve": -147.30365690529717, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 112, "v1": 114, "curve": -187.42046243060267, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 113, "v1": 115, "curve": -44.498047314424724, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 114, "v1": 116, "curve": -29.701641035372308, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 117, "v1": 118, "curve": 18.448710155740084, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 119, "v1": 117, "curve": -23.45395705103612, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 118, "v1": 120, "curve": 32.16140002003853, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 119, "v1": 121, "curve": 44.7962944276665, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 122, "v1": 120, "curve": -134.17509103618175, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 121, "v1": 123, "curve": 113.62883219194961, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 122, "v1": 124, "curve": 113.96764686320874, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 123, "v1": 125, "curve": 113.96255451296649, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 124, "v1": 126, "curve": -119.96396145651211, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 125, "v1": 126, "curve": -119.82810515177066, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 127, "v1": 128, "curve": 32.438087706195844, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 127, "v1": 129, "curve": 32.44776968682083, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 129, "v1": 130, "curve": 32.33040388367479, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 131, "v1": 130, "curve": 32.30398668425302, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 128, "v1": 132, "curve": -46.50286966551931, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 131, "v1": 133, "curve": -56.95086997832442, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 132, "v1": 134, "curve": 147.35901024263555, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 133, "v1": 135, "curve": 187.400244342568, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 134, "v1": 136, "curve": 44.421072642754716, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 135, "v1": 137, "curve": 29.64020881348025, "color": "1B1F21", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 146, "v1": 147, "curve": -18.408787151896284, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 148, "v1": 146, "curve": 23.395465524309913, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 147, "v1": 149, "curve": -32.07584058572483, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 148, "v1": 150, "curve": -44.677436838726486, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 151, "v1": 149, "curve": 134.27732003261306, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 150, "v1": 152, "curve": -113.73236940220178, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 151, "v1": 153, "curve": -113.73236940220178, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 152, "v1": 154, "curve": -113.73236940220178, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 153, "v1": 155, "curve": 119.92546735645492, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 154, "v1": 155, "curve": 119.92546735645492, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 156, "v1": 157, "curve": -32.38297421940408, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 156, "v1": 158, "curve": -32.38297421940408, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 158, "v1": 159, "curve": -32.38297421940408, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 160, "v1": 159, "curve": -32.38297421940408, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 157, "v1": 161, "curve": 46.52361520809003, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 160, "v1": 162, "curve": 56.94840722014851, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 161, "v1": 163, "curve": -147.30365690529717, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 162, "v1": 164, "curve": -187.42046243060267, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 163, "v1": 165, "curve": -44.498047314424724, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 164, "v1": 166, "curve": -29.701641035372308, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 167, "v1": 168, "curve": 18.448710155740084, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 169, "v1": 167, "curve": -23.45395705103612, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 168, "v1": 170, "curve": 32.16140002003853, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 169, "v1": 171, "curve": 44.7962944276665, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 172, "v1": 170, "curve": -134.17509103618175, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 171, "v1": 173, "curve": 113.62883219194961, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 172, "v1": 174, "curve": 113.96764686320874, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 173, "v1": 175, "curve": 113.96255451296649, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 174, "v1": 176, "curve": -119.96396145651211, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 175, "v1": 176, "curve": -119.82810515177066, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 177, "v1": 178, "curve": 32.438087706195844, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 177, "v1": 179, "curve": 32.44776968682083, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 179, "v1": 180, "curve": 32.33040388367479, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 181, "v1": 180, "curve": 32.30398668425302, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 178, "v1": 182, "curve": -46.50286966551931, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 181, "v1": 183, "curve": -56.95086997832442, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 182, "v1": 184, "curve": 147.35901024263555, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 183, "v1": 185, "curve": 187.400244342568, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 184, "v1": 186, "curve": 44.421072642754716, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 185, "v1": 187, "curve": 29.64020881348025, "color": "6E7275", "cMask": [ "c3" ], "cGroup": [ "c3" ] }, { "v0": 11, "v1": 198, "color": "FFFFFF" }, { "v0": 9, "v1": 199, "color": "FFFFFF" }, { "v0": 200, "v1": 201, "color": "FFFFFF" }, { "v0": 202, "v1": 203, "color": "FFFFFF" }, { "v0": 204, "v1": 35, "curve": 0, "color": "ffffff" }, { "v0": 196, "v1": 205, "color": "ffffff" }, { "v0": 196, "v1": 204, "color": "434343" } ], "goals": [], "discs": [ { "radius": 6, "invMass": 0, "pos": [ -1202.1499112738336, -111.61021879151879 ], "color": "FFFFFF", "bCoef": 0.5 }, { "radius": 6, "invMass": 0, "pos": [ -1200.5876644820403, 127.39916980405829 ], "color": "FFFFFF", "bCoef": 0.5 }, { "radius": 6, "invMass": 0, "pos": [ 1200.4776077048039, 125.3913992218282 ], "color": "FFFFFF", "bCoef": 0.5 }, { "radius": 4, "pos": [ -1200, 600 ], "color": "ff3455", "cGroup": [ "" ], "trait": "art" }, { "radius": 4, "pos": [ -1200, -600 ], "color": "ff3455", "cGroup": [ "" ], "trait": "art" }, { "radius": 4, "pos": [ 1200, -600 ], "color": "0054ec", "cGroup": [ "" ], "trait": "art" }, { "radius": 6, "invMass": 0, "pos": [ 1200.506874322944, -118.06119500598979 ], "color": "FFFFFF", "bCoef": 0.5 }, { "radius": 2, "invMass": 0, "pos": [ -1271.9757209481684, -130.23086488450826 ], "color": "000000", "bCoef": 0.5 }, { "radius": 2, "invMass": 0, "pos": [ 1271.252300242944, -137.1080404459898 ], "color": "000000", "bCoef": 0.5 }, { "radius": 2, "invMass": 0, "pos": [ -1269.5445368296496, 145.76395576141775 ], "color": "000000", "bCoef": 0.5 }, { "radius": 2, "invMass": 0, "pos": [ 1269.8918112829442, 144.8994859540104 ], "color": "000000", "bCoef": 0.5 }, { "radius": 4, "pos": [ 1199.4505732161977, 597.7611625374424 ], "color": "0054ec", "trait": "art" }, { "radius": 6.25, "invMass": 1.6, "pos": [ -593.7043742500168, 21.989050898148772 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -596.6647454269443, 49.19310401126402 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -569.6878819368962, -12.694994583552006 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -609.3597400104962, 95.21245937664004 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -561.7535103221762, 36.498109427712016 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ], "_data": { "mirror": {} } }, { "radius": 6.25, "invMass": 1.6, "pos": [ -649.0315980840962, -28.563737812992013 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -650.6184724070403, 60.30122427187202 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -609.3597400104962, 150.75306067968006 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -666.4872156364803, 131.71056880435205 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -568.1010076139522, 76.16996750131203 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ], "_data": { "mirror": {} } }, { "radius": 6.25, "invMass": 1.6, "pos": [ -626.8153575628803, 9.521245937664004 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -725.2329936438665, 455.7887911442356 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -689.9786120084008, 470.8978118451495 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -737.8238442279614, 503.6340233637962 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -695.0149522420388, -405.42538880785594 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ -654.724230372935, -418.0162393919509 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 631.7221798819919, -59.714138284567525 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 654.3857109333627, -44.605117583653644 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 639.2766902324488, -11.868906065006886 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 666.9765615174576, 23.385475570458848 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 664.4583914006387, 18.349135336820886 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ], "_data": { "mirror": {} } }, { "radius": 6.25, "invMass": 1.6, "pos": [ 689.6400925688284, -9.350735948187907 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ], "_data": { "mirror": {} } }, { "radius": 6.25, "invMass": 1.6, "pos": [ 651.8675408165437, 0.7219445190880176 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 644.3130304660867, 38.49449627137274 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 606.540478713802, -6.832565831368925 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 626.6858396483539, 81.30338825729541 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ], "_data": { "mirror": {} } }, { "radius": 6.25, "invMass": 1.6, "pos": [ 654.3857109333627, 66.19436755638154 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 584.2154671020036, -344.9893060042004 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 639.6152096720211, -307.2167542519157 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 546.4429153497189, -304.6985841350967 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 642.1333797888402, -352.54381635465734 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 538.888404999262, 372.68917728920917 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 559.0337659338138, 380.2436876396661 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 491.0431727797013, 400.389048574218 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 541.406575116081, 410.4617290414939 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 543.9247452328999, 493.5613428965203 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] }, { "radius": 6.25, "invMass": 1.6, "pos": [ 616.9516786206503, 475.9341520787874 ], "color": "00fbff", "bCoef": 0.37, "cMask": [ "all" ], "cGroup": [ "ball", "kick", "score" ], "damping": 0.99, "gravity": [ 0, 0 ] } ], "planes": [ { "normal": [ 0, 1 ], "dist": -600, "bCoef": 1, "cMask": [ "ball" ], "_data": { "extremes": { "normal": [ 0, 1 ], "dist": -600, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -650.3236572708964, -600 ], "b": [ 771.884156283841, -600 ] } } }, { "normal": [ 0, -1 ], "dist": -600, "bCoef": 1, "cMask": [ "ball" ], "_data": { "extremes": { "normal": [ 0, -1 ], "dist": -600, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -650.3236572708964, 600 ], "b": [ 771.884156283841, 600 ] } } }, { "normal": [ -1, 0 ], "dist": -1252, "bCoef": 0.1, "cMask": [ "ball" ], "x": 1252, "_data": { "extremes": { "normal": [ -1, 0 ], "dist": -1252, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ 1252, -317.65809412847636 ], "b": [ 1252, 322.1603348326595 ] } } }, { "normal": [ 1, 0 ], "dist": -1252, "bCoef": 0.1, "cMask": [ "ball" ], "_data": { "extremes": { "normal": [ 1, 0 ], "dist": -1252, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -1252, -317.65809412847636 ], "b": [ -1252, 322.1603348326595 ] } } }, { "normal": [ 0, 1 ], "dist": -635, "_data": { "extremes": { "normal": [ 0, 1 ], "dist": -635, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -650.3236572708964, -635 ], "b": [ 771.884156283841, -635 ] } } }, { "normal": [ 0, -1 ], "dist": -635, "_data": { "extremes": { "normal": [ 0, -1 ], "dist": -635, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -650.3236572708964, 635 ], "b": [ 771.884156283841, 635 ] } } }, { "normal": [ 1, 0 ], "dist": -1275, "_data": { "extremes": { "normal": [ 1, 0 ], "dist": -1275, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ -1275, -317.65809412847636 ], "b": [ -1275, 322.1603348326595 ] } } }, { "normal": [ -1, 0 ], "dist": -1275, "_data": { "extremes": { "normal": [ -1, 0 ], "dist": -1275, "canvas_rect": [ -650.3236572708964, -317.65809412847636, 771.884156283841, 322.1603348326595 ], "a": [ 1275, -317.65809412847636 ], "b": [ 1275, 322.1603348326595 ] } } } ], "traits": { "art": { "cGroup": [ "" ], "cMask": [ "" ], "color": "8b8b8b" }, "parede": { "cMask": [ "ball" ], "color": "8b8b8b", "bCoef": 1 }, "gol": { "cMask": [ "ball" ], "color": "8b8b8b", "bCoef": 0.1 } }, "playerPhysics": { "acceleration": 0.11, "kickingAcceleration": 0.083, "kickStrength": 5.2, "bCoef": 0.1, "radius": 15, "invMass": 0.5, "damping": 0.96, "cGroup": [ "red", "blue" ], "gravity": [ 0, 0 ], "kickingDamping": 0.96, "kickback": 0 }, "ballPhysics": { "radius": 6.25, "bCoef": 0.37, "invMass": 1.6, "color": "4dff00", "cMask": [ "all" ], "damping": 0.99, "gravity": [ 0, 0 ], "cGroup": [ "ball" ] }, "joints": [], "canBeStored": false, "cameraWidth": 0, "cameraHeight": 0, "maxViewWidth": 0, "cameraFollow": "player", "kickOffReset": "partial" }';
const bigMap = '{ "name": "Ardilla 5VS5 CON DT", "width": 900, "height": 500, "cameraWidth": 0, "cameraHeight": 0, "maxViewWidth": 0, "cameraFollow": "player", "spawnDistance": 170, "redSpawnPoints": [ [ -56.19, 374.41 ], [ -186.93, 386.83 ], [ -230.15, 386.83 ], [ -274.46, 386.83 ], [ -318.16, 386.83 ], [ -363.18, 386.83 ], [ -185.09, 423.71 ], [ -228.61, 423.71 ], [ -276.14, 423.71 ], [ -317.16, 423.71 ], [ -362.18, 423.71 ] ], "blueSpawnPoints": [ [ 55.11, 374.41 ], [ 199.6, 383.69 ], [ 238.12, 383.69 ], [ 279.64, 383.69 ], [ 321.16, 383.69 ], [ 368.68, 383.69 ], [ 200.1, 420.21 ], [ 236.12, 420.21 ], [ 280.64, 420.21 ], [ 321.16, 420.21 ], [ 367.68, 420.21 ] ], "canBeStored": false, "kickOffReset": "partial", "bg": { "color": "404447", "type": "none", "height": 346, "width": 793, "kickOffRadius": 95, "cornerRadius": 0 }, "traits": { "ballArea": { "vis": false, "bCoef": 1, "cMask": [ "ball" ] }, "goalPost": { "radius": 8, "invMass": 0, "bCoef": 0.5 }, "goalNet": { "vis": true, "bCoef": 0.1, "cMask": [ "ball" ] }, "kickOffBarrier": { "vis": false, "bCoef": 0.1, "cGroup": [ "redKO", "blueKO" ], "cMask": [ "red", "blue" ] } }, "vertexes": [ { "x": -793.491014653097, "y": -346.95377630425423, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "vis": true, "color": "F8F8F8", "bias": 0 }, { "x": 792.1295670084816, "y": -345.5641958400002, "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea", "color": "F8F8F8", "bias": 0 }, { "x": -793.3342113640623, "y": 345.96130959864604, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "color": "F8F8F8", "vis": true, "curve": 0, "bias": 10 }, { "x": 792.93788815796, "y": 345.5641958400001, "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea", "color": "F8F8F8", "vis": true, "curve": 0 }, { "x": 0, "y": -344.08800000000014, "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea", "color": "F8F8F8" }, { "x": 0, "y": -95.64480000000003, "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea", "color": "F8F8F8", "vis": false }, { "x": 0.12024857801301159, "y": 95.64480000000003, "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea", "color": "F8F8F8", "vis": false }, { "x": 0, "y": 346.4208000000001, "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea", "color": "F8F8F8" }, { "x": -793.3835602458287, "y": -86.15561365934879, "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "color": "F8F8F8", "vis": true, "bias": 10 }, { "x": -793.3835602458287, "y": 86.41595291311499, "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "color": "F8F8F8", "vis": true, "bias": 10 }, { "x": -846.7295702655292, "y": -86.35690042689421, "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "color": "F8F8F8" }, { "x": -847.3288535632288, "y": 86.55818719443965, "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "color": "F8F8F8" }, { "x": -800.5726882193883, "y": -347.4131182953517, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "x": -800.9544803656473, "y": -86.56126644349983, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "x": 793.097211167373, "y": -86.81885101074246, "bCoef": 0.1, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "273FF5", "bias": 10 }, { "x": 793.0972111673731, "y": 86.02394056913182, "bCoef": 0.1, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "273FF5" }, { "x": 845.2843307159213, "y": -86.81885101074248, "bCoef": 0.1, "cMask": [ "all" ], "trait": "ballArea", "color": "F8F8F8" }, { "x": 846.7543904215141, "y": 86.02394056913182, "bCoef": 0.1, "cMask": [ "all" ], "color": "F8F8F8" }, { "x": 800.182898948331, "y": -86.25986892242035, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "vis": false }, { "x": 800.9767311893511, "y": -346.11085708479396, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "vis": false }, { "x": 799.3890667073108, "y": 86.64136564548086, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "vis": false }, { "x": 800.9767311893511, "y": 344.5231926027536, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "vis": false }, { "x": -801.3168000000003, "y": 345.25440000000015, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "x": -802.4832000000002, "y": 86.64480000000003, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "x": -94.28241467856671, "y": 0.729088061696918, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "ffff00", "curve": 0 }, { "x": 95.01150274026365, "y": 0.6809220827263225, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "ffff00" }, { "x": -75.3780745578039, "y": 0.7353958493444284, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0 }, { "x": 76.11347040714833, "y": 0.7353958493444284, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0 }, { "x": -94.13066871608682, "y": 13.237125288199708, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0, "color": "273FF5" }, { "x": -75.01037663313168, "y": 12.869427363527494, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0, "color": "273FF5" }, { "x": -9.560146041477568, "y": 94.86606456543124, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0, "color": "273FF5" }, { "x": 9.927843966149782, "y": 94.49836664075903, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0 }, { "x": -9.192448116805354, "y": 74.27498078378726, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0, "color": "273FF5" }, { "x": 9.927843966149782, "y": 74.64267870845947, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "x": 94.49836664075903, "y": 12.134031514183066, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "curve": 0 }, { "x": 76.11347040714833, "y": 12.50172943885528, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "x": -793.4627056086642, "y": -309.6016525740042, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "vis": true, "color": "F8F8F8" }, { "x": 793.4627056086642, "y": -309.6016525740042, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8", "vis": true }, { "x": -793.4627056086642, "y": 309.6016525740042, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8", "vis": true }, { "x": 793.4627056086642, "y": 309.6016525740042, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "vis": true, "color": "F8F8F8" }, { "x": -758.2372444250663, "y": -345.26835126720897, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "vis": true, "color": "F8F8F8" }, { "x": 758.2372444250663, "y": -345.26835126720897, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8", "vis": true }, { "x": -758.2372444250663, "y": 345.26835126720897, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8", "vis": true }, { "x": 758.2372444250663, "y": 345.26835126720897, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "vis": true, "color": "F8F8F8" }, { "x": -795.4199055022101, "y": -216.71620179850635, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": 795.4199055022101, "y": -216.71620179850635, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": 418.34959101762945, "y": -346.110857084794, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": -795.4199055022101, "y": 216.71620179850635, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": -418.34959101762945, "y": 346.110857084794, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": 795.4199055022101, "y": 216.71620179850635, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": 418.34959101762945, "y": 346.110857084794, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": -418.0500899542742, "y": -346.0405797819484, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": -612.3047357689059, "y": -216.10755380079033, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -611.9076220102598, "y": 216.29839714246535, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": 607.2622261802209, "y": -218.26862933879823, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0, "color": "F8F8F8" }, { "x": 605.6414195267149, "y": 216.10755380079033, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": 418.96701609397843, "y": -94.81885101074249, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": 418.96701609397843, "y": 98.49400027472475, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -417.4969563883855, "y": -94.08382115794603, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -418.23198624118197, "y": 97.7589704219283, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -377.33402231439334, "y": 381.4833839382657, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "curve": -195, "color": "000000" }, { "x": -347.2725733288461, "y": 382.063428675403, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "curve": -195, "color": "000000" }, { "x": -332.8915299931292, "y": 381.92147396083686, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -302.53541489494364, "y": 382.0137055947122, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -289.4349703123589, "y": 381.856481284987, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -259.4122939904664, "y": 381.290990550905, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -244.25333989614742, "y": 381.67122493172076, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -214.1377521527948, "y": 381.79182850292966, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -200.88946504097567, "y": 381.7271757208723, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -171.38514395485026, "y": 382.1256071730153, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 352.7547039291887, "y": 381.694867587915, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 382.1622054576522, "y": 381.4029771203539, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 306.838603694321, "y": 381.57726025261627, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 335.6233337420271, "y": 381.77591600021265, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 264.1214301441535, "y": 381.5772602526163, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 293.0356359856292, "y": 381.98675805547595, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 223.57867234304166, "y": 381.2853697850552, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 251.97170727559435, "y": 381.70705389558196, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 183.9185105512515, "y": 381.66774550075036, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 213.07773816042567, "y": 381.8368475385477, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -70.56858570309132, "y": 368.63923135937495, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": -40.41735587996977, "y": 368.2715334347027, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": 39.00539584922846, "y": 369.00692928404715, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "00008b" }, { "x": 68.78892774767779, "y": 369.00692928404715, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "00008b" }, { "x": -394.66628561949875, "y": 346.1689308215217, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": -106.59243569140057, "y": 345.77154804448685, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": -106.42648731712565, "y": 401.0848962324511, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": -394.33396233546927, "y": 401.08489623245106, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": 397.8832062647437, "y": 345.0791486230897, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": 398.3463997528284, "y": 400.8593356175402, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": 123.34035652537571, "y": 345.5423421111744, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": 122.48004927864501, "y": 400.3961421294555, "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ], "color": "FFFFFF" }, { "x": 25.1374643435911, "y": 345.02206931568793, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "00008b" }, { "x": 25.48960534871658, "y": 399.1409712403372, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "00008b" }, { "x": 83.53905181596085, "y": 398.78075678185087, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "00008b" }, { "x": 83.45717976228077, "y": 345.8612695865003, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea", "color": "00008b" }, { "x": -27.110786627066542, "y": 398.46551507688497, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": -27.110786627066542, "y": 346.5408988063462, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": -84.80001863582442, "y": 398.15027337191907, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": -84.08766317221253, "y": 346.2256571013803, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "ff0000" }, { "x": -3.5017427699202135, "y": 345.17178732070676, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "x": 6.002987605577509, "y": 345.67203628783824, "cMask": [ "red" ], "cGroup": [ "redKO" ], "vis": false }, { "x": -2.000995868525836, "y": 498.2479712629332, "cMask": [ "blue" ], "cGroup": [ "blueKO" ], "vis": false }, { "x": -4.502240704183132, "y": -346.67253422210115, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "x": 3.5017427699202135, "y": -347.1727831892326, "cMask": [ "red" ], "cGroup": [ "redKO" ] }, { "x": 5.50273863844605, "y": -499.7487181643276, "cMask": [ "red" ], "cGroup": [ "redKO" ] }, { "x": -4.502240704183132, "y": -499.24846919719613, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "x": 506.77221366285323, "y": 1.0805377690039515, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0 }, { "x": 512.583012274537, "y": 0.9457251148976697, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "curve": 0 }, { "x": -516.9380180505472, "y": 1.751342805366055, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -511.68398963444906, "y": 1.7513428053660554, "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "color": "F8F8F8" }, { "x": -860.6855125660713, "y": -436.8115160689357, "bCoef": 0.1, "cMask": [ "all" ], "cGroup": [ "wall" ] }, { "x": 792.0401920000002, "y": -86.34963200000001, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "x": 792.7014399999999, "y": -345.8136320000001, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "x": 792.455265965554, "y": 345.27475486460395, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "x": 793.0429304475942, "y": 86.26332368033326, "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "x": 139.31469318013376, "y": 382.5255112194257, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": 168.47392078930793, "y": 382.69461325722307, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -159.36880076906456, "y": 382.7276736551352, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" }, { "x": -129.86447968293916, "y": 383.1261051072782, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ], "color": "000000" } ], "segments": [ { "v0": 0, "v1": 1, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea", "bias": 0 }, { "v0": 2, "v1": 3, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea" }, { "v0": 4, "v1": 5, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea" }, { "v0": 6, "v1": 7, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "red", "blue" ], "cGroup": [ "redKO", "blueKO" ], "trait": "ballArea" }, { "v0": 5, "v1": 6, "curve": 179.09207450040802, "vis": false, "color": "000000", "bCoef": 0, "cMask": [ "red" ], "cGroup": [ "redKO" ] }, { "v0": 6, "v1": 5, "curve": 178.7578411474223, "vis": false, "color": "000000", "bCoef": 0, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "v0": 8, "v1": 9, "color": "FF5000", "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 8, "v1": 10, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "v0": 10, "v1": 11, "curve": 1.8880295128147155, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "v0": 11, "v1": 9, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "ball" ], "cGroup": [ "wall" ] }, { "v0": 0, "v1": 8, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "bias": 10 }, { "v0": 14, "v1": 15, "color": "273FF5", "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 14, "v1": 16, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "all" ], "trait": "ballArea" }, { "v0": 15, "v1": 17, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "all" ] }, { "v0": 17, "v1": 16, "curve": -1.0898296343901905, "vis": true, "color": "F8F8F8", "bCoef": 0.1, "cMask": [ "all" ], "trait": "ballArea" }, { "v0": 21, "v1": 20, "vis": false, "color": "432355", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "v0": 18, "v1": 19, "vis": false, "color": "432355", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "v0": 9, "v1": 2, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea", "bias": 10 }, { "v0": 23, "v1": 22, "vis": false, "color": "432355", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "trait": "ballArea" }, { "v0": 24, "v1": 25, "curve": 181.75119676599866, "vis": true, "color": "ffff00", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 26, "v1": 24, "curve": 0, "vis": true, "color": "ffff00", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 27, "v1": 25, "curve": 0, "vis": true, "color": "ffff00", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 26, "v1": 27, "curve": 181.299689825079, "vis": true, "color": "ffff00", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 29, "v1": 32, "curve": -75.38361713802453, "vis": true, "color": "273FF5", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 28, "v1": 30, "curve": -74.11777684680632, "vis": true, "color": "273FF5", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 28, "v1": 29, "curve": 0, "vis": true, "color": "273FF5", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 30, "v1": 32, "curve": 0, "vis": true, "color": "273FF5", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 33, "v1": 35, "curve": -74.11777684680632, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 34, "v1": 31, "curve": 75.26314750626199, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 31, "v1": 33, "curve": 0, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 35, "v1": 34, "curve": 0, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 36, "v1": 40, "curve": -93.91874875705984, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 37, "v1": 41, "curve": 93.91874875705984, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 38, "v1": 42, "curve": 93.91874875705984, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 39, "v1": 43, "curve": -93.91874875705984, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 46, "v1": 50, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 51, "v1": 48, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 44, "v1": 52, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 47, "v1": 53, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 52, "v1": 53, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 45, "v1": 54, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 49, "v1": 55, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 54, "v1": 55, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 56, "v1": 57, "curve": -83.877456599449, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 58, "v1": 59, "curve": 78.54092709560351, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 60, "v1": 61, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 62, "v1": 63, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 64, "v1": 65, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 66, "v1": 67, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 68, "v1": 69, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 70, "v1": 71, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 72, "v1": 73, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 74, "v1": 75, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 76, "v1": 77, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 78, "v1": 79, "curve": -195, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 80, "v1": 81, "curve": -195, "vis": true, "color": "ff0000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 82, "v1": 83, "curve": -195, "vis": true, "color": "00008b", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 84, "v1": 85, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 85, "v1": 86, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ] }, { "v0": 84, "v1": 87, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ] }, { "v0": 88, "v1": 89, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ] }, { "v0": 88, "v1": 90, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 90, "v1": 91, "curve": 0, "vis": true, "color": "FFFFFF", "bCoef": 1, "cMask": [ "wall" ], "cGroup": [ "ball" ] }, { "v0": 92, "v1": 93, "curve": 0, "vis": true, "color": "00008b", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 93, "v1": 94, "curve": 0, "vis": true, "color": "00008b", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 94, "v1": 95, "curve": 0, "vis": true, "color": "00008b", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ], "trait": "ballArea" }, { "v0": 96, "v1": 97, "curve": 0, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 96, "v1": 98, "curve": 0, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 99, "v1": 98, "curve": 0, "vis": true, "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 101, "v1": 102, "vis": false, "cMask": [ "red" ], "cGroup": [ "redKO" ] }, { "v0": 100, "v1": 102, "vis": false, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "v0": 104, "v1": 105, "vis": false, "cMask": [ "red" ], "cGroup": [ "redKO" ] }, { "v0": 103, "v1": 106, "vis": false, "cMask": [ "blue" ], "cGroup": [ "blueKO" ] }, { "v0": 107, "v1": 108, "curve": 180, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 107, "v1": 108, "curve": -180, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 107, "v1": 108, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 109, "v1": 110, "curve": 0, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 109, "v1": 110, "curve": 180, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 109, "v1": 110, "curve": -180, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "v0": 112, "v1": 113, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "bias": 10 }, { "v0": 114, "v1": 115, "vis": true, "color": "F8F8F8", "bCoef": 1, "cMask": [ "ball" ], "cGroup": [ "wall" ], "bias": 10 }, { "v0": 116, "v1": 117, "curve": -206.68912424624253, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "v0": 118, "v1": 119, "curve": -189.22910787619097, "vis": true, "color": "000000", "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] } ], "goals": [ { "p0": [ 802.575765395309, -86.33323888298533 ], "p1": [ 802.2059350221921, 86.33323888298533 ], "team": "blue" }, { "p0": [ -802.3154261415428, -86.33323888298533 ], "p1": [ -802.8361046490752, 86.33323888298533 ], "team": "red" } ], "discs": [ { "radius": 5, "pos": [ -792.9634471612399, -86.96340850986843 ], "color": "ff5000", "trait": "goalPost" }, { "radius": 5, "invMass": 0, "pos": [ -793.546937556502, 88.71387969565484 ], "color": "ff5000", "bCoef": 0.5, "trait": "goalPost" }, { "radius": 5, "invMass": 0, "pos": [ 793.0727036070446, 86.14152124921661 ], "color": "273FF5", "bCoef": 0.5, "trait": "goalPost" }, { "radius": 5, "invMass": 0, "pos": [ 792.6797605786472, -86.91420926917945 ], "color": "273FF5", "bCoef": 0.5, "trait": "goalPost" }, { "radius": 3, "invMass": 0, "pos": [ -793.7715718653889, -346.7097271319241 ], "color": "4390bb", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 3, "invMass": 0, "pos": [ 791.843387296512, -344.91966340868544 ], "color": "4390bb", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 3, "invMass": 0, "pos": [ 792.3890276686215, 344.5329554178646 ], "color": "4390bb", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 3, "invMass": 0, "pos": [ -793.8598193673104, 345.2683512672091 ], "color": "4390bb", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 2, "invMass": 0, "pos": [ -39.99980481391607, 368.9171187229421 ], "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 2, "invMass": 0, "pos": [ -70.81046527868926, 368.9171187229421 ], "color": "ff0000", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 2, "invMass": 0, "pos": [ 38.648460056689174, 369.1873876743875 ], "color": "00ffff", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 2, "invMass": 0, "pos": [ 68.91858261857159, 369.4576566258329 ], "color": "00ffff", "bCoef": 1, "cMask": [ "redKO", "blueKO" ], "cGroup": [ "ball" ] }, { "radius": 3, "invMass": 0, "pos": [ -106.55302999900078, 400.19917370516725 ], "color": "F8F8F8", "bCoef": 1, "cMask": [ "all" ], "cGroup": [ "ball" ], "trait": "goalPost" }, { "radius": 3, "invMass": 0, "pos": [ -394.6964350667212, 399.69892473803577 ], "color": "F8F8F8", "bCoef": 1, "cMask": [ "all" ], "cGroup": [ "ball" ], "trait": "goalPost" }, { "radius": 3, "invMass": 0, "pos": [ 398.19817783664143, 400.19917370516725 ], "color": "F8F8F8", "bCoef": 1, "cMask": [ "all" ], "cGroup": [ "ball" ], "trait": "goalPost" }, { "radius": 3, "invMass": 0, "pos": [ 122.56099694720747, 399.69892473803577 ], "color": "F8F8F8", "bCoef": 1, "cMask": [ "all" ], "cGroup": [ "ball" ], "trait": "goalPost" } ], "planes": [ { "normal": [ 0, 1 ], "dist": -345.2920980480001, "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea", "color": "423255" }, { "normal": [ 0, -1 ], "dist": -345.67958462616247, "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea" }, { "normal": [ 1, 0 ], "dist": -860.8680752510578, "cMask": [ "ball" ] }, { "normal": [ 0, -1 ], "dist": -346.4208000000001, "bCoef": 1, "cMask": [ "ball" ], "trait": "ballArea" }, { "normal": [ 1, 0 ], "dist": -900, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "normal": [ 0, -1 ], "dist": -500, "cMask": [ "all" ] }, { "normal": [ 0, 1 ], "dist": -499.99999999999994, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] }, { "normal": [ -1, 0 ], "dist": -898.148148148148, "bCoef": 0, "cMask": [ "all" ], "cGroup": [ "ball" ] } ], "joints": [], "playerPhysics": { "radius": 15, "bCoef": 0.01, "invMass": 0.5, "damping": 0.96, "cGroup": [ "red", "blue" ], "acceleration": 0.11, "gravity": [ 0, 0 ], "kickingAcceleration": 0.083, "kickingDamping": 0.96, "kickStrength": 5, "kickback": 0 }, "ballPhysics": { "radius": 6.25, "bCoef": 0.4, "cMask": [ "all" ], "damping": 0.99, "invMass": 1.5, "gravity": [ 0, 0 ], "color": "FFA500", "cGroup": [ "ball" ] } }';

room.setScoreLimit(scoreLimit);
room.setTimeLimit(timeLimit);
room.setTeamsLock(true);
room.setKickRateLimit(6, 0, 0);

var masterPassword = '8523';
var roomPassword = '';

/* OPTIONS */

var drawTimeLimit = Infinity;
var maxAdmins = 2;
var disableBans = false;
var maxInactivity = 12;
var debugMode = false;

var hideClaimMessage = true;
var mentionPlayersUnpause = true;

/* OBJECTS */

class Goal {
    constructor(time, team, striker, assist) {
        this.time = time;
        this.team = team;
        this.striker = striker;
        this.assist = assist;
    }
}

class Game {
    constructor() {
        this.date = Date.now();
        this.scores = room.getScores();
        this.playerComp = getStartingLineups();
        this.goals = [];
        this.rec = room.startRecording();
        this.touchArray = [];
    }
}

class PlayerComposition {
    constructor(player, auth, timeEntry, timeExit) {
        this.player = player;
        this.auth = auth;
        this.timeEntry = timeEntry;
        this.timeExit = timeExit;
        this.inactivityTicks = 0;
        this.GKTicks = 0;
    }
}

class BallTouch {
    constructor(player, time, goal, position) {
        this.player = player;
        this.time = time;
        this.goal = goal;
        this.position = position;
    }
}

/* PLAYERS */

const Team = { SPECTATORS: 0, RED: 1, BLUE: 2 };
const State = { PLAY: 0, PAUSE: 1, STOP: 2 };
const Role = { PLAYER: 0, ADMIN_TEMP: 1, ADMIN_PERM: 2, MASTER: 3 };
const HaxNotification = { NONE: 0, CHAT: 1, MENTION: 2 };
const Situation = { STOP: 0, KICKOFF: 1, PLAY: 2, GOAL: 3 };

var gameState = State.STOP;
var playSituation = Situation.STOP;
var goldenGoal = false;

var players = [];
var teamRed = [];
var teamBlue = [];
var teamSpec = [];

var banList = [];

/* STATS */

var possession = [0, 0];
var actionZoneHalf = [0, 0];

/* AUTH */

var authArray = [];
var adminList = [
    // ['INSERT_AUTH_HERE_1', 'NICK_OF_ADMIN_1'],
    // ['INSERT_AUTH_HERE_2', 'NICK_OF_ADMIN_2'],
];
var masterList = [
    // 'INSERT_MASTER_AUTH_HERE',
    // 'INSERT_MASTER_AUTH_HERE_2'
];

/* COMMANDS */

var commands = {
    help: {
        aliases: ['commands'],
        roles: Role.PLAYER,
        desc: `
	This command shows all the available commands. It also can show the description of a command in particular.
Example: \'!help bb\' will show the description of the \'bb\' command.`,
        function: helpCommand,
    },
    claim: {
        aliases: [],
        roles: Role.PLAYER,
        desc: false,
        function: masterCommand,
    },
    bb: {
        aliases: ['bye', 'gn', 'cya'],
        roles: Role.PLAYER,
        desc: `
	This command makes you leave instantly (use recommended).`,
        function: leaveCommand,
    },
    rr: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command restarts the game.`,
        function: restartCommand,
    },
    rrs: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams and restarts the game.`,
        function: restartSwapCommand,
    },
    swap: {
        aliases: ['s'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command swaps the teams when the game is stopped.`,
        function: swapCommand,
    },
    training: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the classic training stadium.`,
        function: stadiumCommand,
    },
    big: {
        aliases: [],
        roles: Role.ADMIN_TEMP,
        desc: `
        This command loads the big stadium.`,
        function: stadiumCommand,
    },
    kickred: {
        aliases: ['kickr'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the red team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickblue: {
        aliases: ['kickb'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the blue team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    kickspec: {
        aliases: ['kicks'],
        roles: Role.ADMIN_TEMP,
        desc: `
    This command kicks all the players from the spectators team, including the player that entered the command. You can give as an argument the reason of the kick.`,
        function: kickTeamCommand,
    },
    clearbans: {
        aliases: [],
        roles: Role.MASTER,
        desc: `
	This command unbans everyone. It also can unban one player in particular, by adding his ID as an argument.`,
        function: clearbansCommand,
    },
    bans: {
        aliases: ['banlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that were banned and their IDs.`,
        function: banListCommand,
    },
    admins: {
        aliases: ['adminlist'],
        roles: Role.MASTER,
        desc: `
    This command shows all the players that are permanent admins.`,
        function: adminListCommand,
    },
    setadmin: {
        aliases: ['admin'],
        roles: Role.MASTER,
        desc: `
    This command allows to set someone as admin. He will be able to connect as admin, and can be removed at any time by masters.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
Example: !setadmin #3 will give admin to the player with id 3.`,
        function: setAdminCommand,
    },
    removeadmin: {
        aliases: ['unadmin'],
        roles: Role.MASTER,
        desc: `
	This command allows to remove someone as admin.
It takes 1 argument:
Argument 1: #<id> where <id> is the id of the player targeted.
OR
Argument 1: <number> where <number> is the number associated with the admin given by the 'adminList' command.
Example: !removeadmin #300 will remove admin to the player with id 300,
         !removeadmin 2 will remove the admin n°2 according to the 'adminList' command.`,
        function: removeAdminCommand,
    },
    password: {
        aliases: ['pw'],
        roles: Role.MASTER,
        desc: `
        This command allows to add a password to the room.
    It takes 1 argument:
    Argument 1: <password> where <password> is the password you want for the room.
    
    To remove the room password, simply enter '!password'.`,
        function: passwordCommand,
    },
};

/* GAME */

var lastTouches = Array(2).fill(null);
var lastTeamTouched;

var speedCoefficient = 100 / (5 * (0.99 ** 60 + 1));
var ballSpeed = 0;
var playerRadius = 15;
var ballRadius = 10;
var triggerDistance = playerRadius + ballRadius + 0.01;

/* COLORS */

var welcomeColor = 0x9ad143;
var announcementColor = 0xffefd6;
var infoColor = 0xbebebe;
var privateMessageColor = 0xffc933;
var redColor = 0xff4c4c;
var blueColor = 0x62cbff;
var warningColor = 0xffa135;
var errorColor = 0xa40000;
var successColor = 0x75ff75;
var defaultColor = null;

/* AUXILIARY */

var checkTimeVariable = false;
var checkStadiumVariable = true;
var endGameVariable = false;
var cancelGameVariable = false;
var kickFetchVariable = false;

var stopTimeout;
var startTimeout;
var unpauseTimeout;

var emptyPlayer = {
    id: 0,
};
stadiumCommand(emptyPlayer, "!big");

var game = new Game();

/* FUNCTIONS */

/* AUXILIARY FUNCTIONS */

if (typeof String.prototype.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        var target = this;
        return target.split(search).join(replacement);
    };
}

function getDate() {
    let d = new Date();
    return d.toLocaleDateString() + ' ' + d.toLocaleTimeString();
}

/* MATH FUNCTIONS */

function getRandomInt(max) {
    // returns a random number between 0 and max-1
    return Math.floor(Math.random() * Math.floor(max));
}

function pointDistance(p1, p2) {
    return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
}

/* TIME FUNCTIONS */

function getMinutesGame(time) {
    var t = Math.floor(time / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getMinutesReport(time) {
    return Math.floor(Math.round(time) / 60);
}

function getMinutesEmbed(time) {
    var t = Math.floor(Math.round(time) / 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsGame(time) {
    var t = Math.floor(time - Math.floor(time / 60) * 60);
    return `${Math.floor(t / 10)}${Math.floor(t % 10)}`;
}

function getSecondsReport(time) {
    var t = Math.round(time);
    return Math.floor(t - Math.floor(t / 60) * 60);
}

function getSecondsEmbed(time) {
    var t = Math.round(time);
    var t2 = Math.floor(t - Math.floor(t / 60) * 60);
    return `${Math.floor(t2 / 10)}${Math.floor(t2 % 10)}`;
}

function getTimeGame(time) {
    return `[${getMinutesGame(time)}:${getSecondsGame(time)}]`;
}

function getTimeEmbed(time) {
    return `[${getMinutesEmbed(time)}:${getSecondsEmbed(time)}]`;
}

function getGoalGame() {
    return game.scores.red + game.scores.blue;
}

/* REPORT FUNCTIONS */

function findFirstNumberCharString(str) {
    let str_number = str[str.search(/[0-9]/g)];
    return str_number === undefined ? "0" : str_number;
}

function getIdReport() {
    var d = new Date();
    return `${d.getFullYear() % 100}${d.getMonth() < 9 ? '0' : ''}${d.getMonth() + 1}${d.getDate() < 10 ? '0' : ''}${d.getDate()}${d.getHours() < 10 ? '0' : ''}${d.getHours()}${d.getMinutes() < 10 ? '0' : ''}${d.getMinutes()}${d.getSeconds() < 10 ? '0' : ''}${d.getSeconds()}${findFirstNumberCharString(roomName)}`;
}

function getRecordingName(game) {
    let d = new Date();
    let redCap = game.playerComp[0][0] != undefined ? game.playerComp[0][0].player.name : 'Red';
    let blueCap = game.playerComp[1][0] != undefined ? game.playerComp[1][0].player.name : 'Blue';
    let day = d.getDate() < 10 ? '0' + d.getDate() : d.getDate();
    let month = d.getMonth() < 10 ? '0' + (d.getMonth() + 1) : (d.getMonth() + 1);
    let year = d.getFullYear() % 100 < 10 ? '0' + (d.getFullYear() % 100) : (d.getFullYear() % 100);
    let hour = d.getHours() < 10 ? '0' + d.getHours() : d.getHours();
    let minute = d.getMinutes() < 10 ? '0' + d.getMinutes() : d.getMinutes();
    return `${day}-${month}-${year}-${hour}h${minute}-${redCap}vs${blueCap}.hbr2`;
}

function fetchRecording(game) {
    if (gameWebhook != "") {
        let form = new FormData();
        form.append(null, new File([game.rec], getRecordingName(game), { "type": "text/plain" }));
        form.append("payload_json", JSON.stringify({
            "username": roomName
        }));

        fetch(gameWebhook, {
            method: 'POST',
            body: form,
        }).then((res) => res);
    }
}

/* FEATURE FUNCTIONS */

function getCommand(commandStr) {
    if (commands.hasOwnProperty(commandStr)) return commandStr;
    for (const [key, value] of Object.entries(commands)) {
        for (let alias of value.aliases) {
            if (alias == commandStr) return key;
        }
    }
    return false;
}

function getPlayerComp(player) {
    if (player == null || player.id == 0) return null;
    var comp = game.playerComp;
    var index = comp[0].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[0][index];
    index = comp[1].findIndex((c) => c.auth == authArray[player.id][0]);
    if (index != -1) return comp[1][index];
    return null;
}

function getTeamArray(team) {
    return team == Team.RED ? teamRed : team == Team.BLUE ? teamBlue : teamSpec;
}

function sendAnnouncementTeam(message, team, color, style, mention) {
    for (let player of team) {
        room.sendAnnouncement(message, player.id, color, style, mention);
    }
}

function teamChat(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    var emoji = player.team == Team.RED ? '❤' : player.team == Team.BLUE ? '❤' : '⚪';
    var message = `${emoji} [TEAM] ${player.name}: ${msgArray.join(' ')}`;
    var team = getTeamArray(player.team);
    var color = player.team == Team.RED ? redColor : player.team == Team.BLUE ? blueColor : null;
    var style = 'bold';
    var mention = HaxNotification.CHAT;
    sendAnnouncementTeam(message, team, color, style, mention);
}

function playerChat(player, message) {
    var msgArray = message.split(/ +/);
    var playerTargetIndex = players.findIndex(
        (p) => p.name.replaceAll(' ', '_') == msgArray[0].substring(2)
    );
    if (playerTargetIndex == -1) {
        room.sendAnnouncement(
            `Invalid player, make sure the name you entered is correct.`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var playerTarget = players[playerTargetIndex];
    if (player.id == playerTarget.id) {
        room.sendAnnouncement(
            `No te puedes hablar a ti mismo!`,
            player.id,
            errorColor,
            'bold',
            null
        );
        return false;
    }
    var messageFrom = `📝 [PM with ${playerTarget.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    var messageTo = `📝 [PM with ${player.name}] ${player.name}: ${msgArray.slice(1).join(' ')}`

    room.sendAnnouncement(
        messageFrom,
        player.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
    room.sendAnnouncement(
        messageTo,
        playerTarget.id,
        privateMessageColor,
        'bold',
        HaxNotification.CHAT
    );
}

/* PHYSICS FUNCTIONS */

function calculateStadiumVariables() {
    if (checkStadiumVariable && teamRed.length + teamBlue.length > 0) {
        checkStadiumVariable = false;
        setTimeout(() => {
            let ballDisc = room.getDiscProperties(0);
            let playerDisc = room.getPlayerDiscProperties(teamRed.concat(teamBlue)[0].id);
            ballRadius = ballDisc.radius;
            playerRadius = playerDisc.radius;
            triggerDistance = ballRadius + playerRadius + 0.01;
            speedCoefficient = 100 / (5 * ballDisc.invMass * (ballDisc.damping ** 60 + 1));
        }, 1);
    }
}

function checkGoalKickTouch(array, index, goal) {
    if (array != null && array.length >= index + 1) {
        var obj = array[index];
        if (obj != null && obj.goal != null && obj.goal == goal) return obj;
    }
    return null;
}

/* BUTTONS */

function swapButton() {
    for (let player of teamBlue) {
        room.setPlayerTeam(player.id, Team.RED);
    }
    for (let player of teamRed) {
        room.setPlayerTeam(player.id, Team.BLUE);
    }
}

/* COMMAND FUNCTIONS */

/* PLAYER COMMANDS */

function leaveCommand(player, message) {
    room.kickPlayer(player.id, 'Bye !', false);
}

function helpCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        var commandString = 'Player commands :';
        for (const [key, value] of Object.entries(commands)) {
            if (value.desc && value.roles == Role.PLAYER) commandString += ` !${key},`;
        }
        commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        if (getRole(player) >= Role.ADMIN_TEMP) {
            commandString += `Admin commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.ADMIN_TEMP) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':')
                commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        if (getRole(player) >= Role.MASTER) {
            commandString += `Master commands :`;
            for (const [key, value] of Object.entries(commands)) {
                if (value.desc && value.roles == Role.MASTER) commandString += ` !${key},`;
            }
            if (commandString.slice(commandString.length - 1) == ':') commandString += ` None,`;
            commandString = commandString.substring(0, commandString.length - 1) + '.\n';
        }
        commandString += "\nTo get information on a specific command, type ''!help <command name>'.";
        room.sendAnnouncement(
            commandString,
            player.id,
            infoColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (msgArray.length >= 1) {
        var commandName = getCommand(msgArray[0].toLowerCase());
        if (commandName != false && commands[commandName].desc != false)
            room.sendAnnouncement(
                `\'${commandName}\' command :\n${commands[commandName].desc}`,
                player.id,
                infoColor,
                'bold',
                HaxNotification.CHAT
            );
        else
            room.sendAnnouncement(
                `The command you tried to get information on does not exist. To check all available commands, type \'!help\'`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
    }
}

function masterCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (parseInt(msgArray[0]) == masterPassword) {
        if (!masterList.includes(authArray[player.id][0])) {
            room.setPlayerAdmin(player.id, true);
            adminList = adminList.filter((a) => a[0] != authArray[player.id][0]);
            masterList.push(authArray[player.id][0]);
            room.sendAnnouncement(
                `${player.name} ahora es admin principal !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `You are a master already !`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* ADMIN COMMANDS */

function restartCommand(player, message) {
    instantRestart();
}

function restartSwapCommand(player, message) {
    room.stopGame();
    swapButton();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function swapCommand(player, message) {
    if (playSituation == Situation.STOP) {
        swapButton();
        room.sendAnnouncement(
            '✔️ Teams swapped !',
            null,
            announcementColor,
            'bold',
            null
        );
    } else {
        room.sendAnnouncement(
            `Please stop the game before swapping.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function kickTeamCommand(player, message) {
    var msgArray = message.split(/ +/);
    var reasonString = `Team kick by ${player.name}`;
    if (msgArray.length > 1) {
        reasonString = msgArray.slice(1).join(' ');
    }
    if (['!kickred', '!kickr'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamRed.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamRed[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickblue', '!kickb'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamBlue.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamBlue[0].id, reasonString, false);
            }, i * 20)
        }
    } else if (['!kickspec', '!kicks'].includes(msgArray[0].toLowerCase())) {
        for (let i = 0; i < teamSpec.length; i++) {
            setTimeout(() => {
                room.kickPlayer(teamSpec[0].id, reasonString, false);
            }, i * 20)
        }
    }
}

function stadiumCommand(player, message) {
    var msgArray = message.split(/ +/);
    if (gameState == State.STOP) {
        if (['!8321'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(classicMap).name == 'Classic') {
                room.setDefaultStadium('Classic');
            } else {
                room.setCustomStadium(classicMap);
            }
        } else if (['!big'].includes(msgArray[0].toLowerCase())) {
            if (JSON.parse(bigMap).name == 'Big') {
                room.setDefaultStadium('Big');
            } else {
                room.setCustomStadium(bigMap);
            }
        } else if (['!training'].includes(msgArray[0].toLowerCase())) {
            room.setCustomStadium(trainingMap);
        } else {
            room.sendAnnouncement(
                `Stadium not recognized.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Please stop the game before using this command.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

/* MASTER COMMANDS */

function clearbansCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length == 0) {
        room.clearBans();
        room.sendAnnouncement(
            '✔️ Bans limpiados !',
            null,
            announcementColor,
            'bold',
            null
        );
        banList = [];
    } else if (msgArray.length == 1) {
        if (parseInt(msgArray[0]) > 0) {
            var ID = parseInt(msgArray[0]);
            room.clearBan(ID);
            if (banList.length != banList.filter((p) => p[1] != ID).length) {
                room.sendAnnouncement(
                    `✔️ ${banList.filter((p) => p[1] == ID)[0][0]} has sido desbaneado de la sala !`,
                    null,
                    announcementColor,
                    'bold',
                    null
                );
            } else {
                room.sendAnnouncement(
                    `The ID you entered doesn't have a ban associated to. Enter "!help clearbans" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
            banList = banList.filter((p) => p[1] != ID);
        } else {
            room.sendAnnouncement(
                `Invalid ID entered. Enter "!help clearbans" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help clearbans" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function banListCommand(player, message) {
    if (banList.length == 0) {
        room.sendAnnouncement(
            "📢 No hay nadie baneado",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Ban list : ';
    for (let ban of banList) {
        cstm += ban[0] + `[${ban[1]}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function adminListCommand(player, message) {
    if (adminList.length == 0) {
        room.sendAnnouncement(
            "📢 Nadie es administrador",
            player.id,
            announcementColor,
            'bold',
            null
        );
        return false;
    }
    var cstm = '📢 Admin list : ';
    for (let i = 0; i < adminList.length; i++) {
        cstm += adminList[i][1] + `[${i}], `;
    }
    cstm = cstm.substring(0, cstm.length - 2) + '.';
    room.sendAnnouncement(
        cstm,
        player.id,
        announcementColor,
        'bold',
        null
    );
}

function setAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (!adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    if (!masterList.includes(authArray[playerAdmin.id][0])) {
                        room.setPlayerAdmin(playerAdmin.id, true);
                        adminList.push([authArray[playerAdmin.id][0], playerAdmin.name]);
                        room.sendAnnouncement(
                            `${playerAdmin.name} is now a room admin !`,
                            null,
                            announcementColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    } else {
                        room.sendAnnouncement(
                            `This player is a master already !`,
                            player.id,
                            errorColor,
                            'bold',
                            HaxNotification.CHAT
                        );
                    }
                } else {
                    room.sendAnnouncement(
                        `This player is a permanent admin already !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help setadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help setadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help setadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function removeAdminCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray[0].length > 0 && msgArray[0][0] == '#') {
            msgArray[0] = msgArray[0].substring(1, msgArray[0].length);
            if (room.getPlayer(parseInt(msgArray[0])) != null) {
                var playerAdmin = room.getPlayer(parseInt(msgArray[0]));

                if (adminList.map((a) => a[0]).includes(authArray[playerAdmin.id][0])) {
                    room.setPlayerAdmin(playerAdmin.id, false);
                    adminList = adminList.filter((a) => a[0] != authArray[playerAdmin.id][0]);
                    room.sendAnnouncement(
                        `${playerAdmin.name} is not a room admin anymore !`,
                        null,
                        announcementColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                } else {
                    room.sendAnnouncement(
                        `This player isn't a permanent admin !`,
                        player.id,
                        errorColor,
                        'bold',
                        HaxNotification.CHAT
                    );
                }
            } else {
                room.sendAnnouncement(
                    `There is no player with such ID in the room. Enter "!help removeadmin" for more information.`,
                    player.id,
                    errorColor,
                    'bold',
                    HaxNotification.CHAT
                );
            }
        } else if (msgArray[0].length > 0 && parseInt(msgArray[0]) < adminList.length) {
            var index = parseInt(msgArray[0]);
            var playerAdmin = adminList[index];
            if (players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]) != -1) {
                // check if there is the removed admin in the room
                var indexRem = players.findIndex((p) => authArray[p.id][0] == playerAdmin[0]);
                room.setPlayerAdmin(players[indexRem].id, false);
            }
            adminList.splice(index);
            room.sendAnnouncement(
                `${playerAdmin[1]} is not a room admin anymore !`,
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `Incorrect format for your argument. Enter "!help removeadmin" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    } else {
        room.sendAnnouncement(
            `Wrong number of arguments. Enter "!help removeadmin" for more information.`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
    }
}

function passwordCommand(player, message) {
    var msgArray = message.split(/ +/).slice(1);
    if (msgArray.length > 0) {
        if (msgArray.length == 1 && msgArray[0] == '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
        roomPassword = msgArray.join(' ');
        room.setPassword(roomPassword);
        room.sendAnnouncement(
            `The room password has been set to ${roomPassword}`,
            player.id,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        if (roomPassword != '') {
            roomPassword = '';
            room.setPassword(null);
            room.sendAnnouncement(
                `The room password has been removed.`,
                player.id,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        } else {
            room.sendAnnouncement(
                `The room currently does not have a password. Enter "!help password" for more information.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
}

/* GAME FUNCTIONS */

function checkTime() {
    const scores = room.getScores();
    if (game != undefined) game.scores = scores;
    if (Math.abs(scores.time - scores.timeLimit) <= 0.01 && scores.timeLimit != 0 && playSituation == Situation.PLAY) {
        if (scores.red != scores.blue) {
            if (!checkTimeVariable) {
                checkTimeVariable = true;
                setTimeout(() => {
                    checkTimeVariable = false;
                }, 3000);
                scores.red > scores.blue ? endGame(Team.RED) : endGame(Team.BLUE);
                stopTimeout = setTimeout(() => {
                    room.stopGame();
                }, 2000);
            }
            return;
        }
        if (drawTimeLimit != 0) {
            goldenGoal = true;
            room.sendAnnouncement(
                '⚽ First goal wins !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
        }
    }
    if (Math.abs(scores.time - drawTimeLimit * 60 - scores.timeLimit) <= 0.01 && scores.timeLimit != 0) {
        if (!checkTimeVariable) {
            checkTimeVariable = true;
            setTimeout(() => {
                checkTimeVariable = false;
            }, 10);
            endGame(Team.SPECTATORS);
            room.stopGame();
            goldenGoal = false;
        }
    }
}

function instantRestart() {
    room.stopGame();
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 10);
}

function resumeGame() {
    startTimeout = setTimeout(() => {
        room.startGame();
    }, 1000);
    setTimeout(() => {
        room.pauseGame(false);
    }, 500);
}

function endGame(winner) {
    const scores = room.getScores();
    game.scores = scores;
    endGameVariable = true;
    if (winner == Team.RED) {
        room.sendAnnouncement(
            `✨ Red Team won ${scores.red} - ${scores.blue} !`,
            null,
            redColor,
            'bold',
            HaxNotification.CHAT
        );
    } else if (winner == Team.BLUE) {
        room.sendAnnouncement(
            `✨ Blue Team won ${scores.blue} - ${scores.red} !`,
            null,
            blueColor,
            'bold',
            HaxNotification.CHAT
        );
    } else {
        room.sendAnnouncement(
            '💤 Draw limit reached !',
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
    }
    let possessionRedPct = (possession[0] / (possession[0] + possession[1])) * 100;
    let possessionBluePct = 100 - possessionRedPct;
    let possessionString = `🔴 ${possessionRedPct.toFixed(0)}% - ${possessionBluePct.toFixed(0)}% 🔵`;
    let actionRedPct = (actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1])) * 100;
    let actionBluePct = 100 - actionRedPct;
    let actionString = `🔴 ${actionRedPct.toFixed(0)}% - ${actionBluePct.toFixed(0)}% 🔵`;
    let CSString = getCSString(scores);
    room.sendAnnouncement(
        `📊 Possession: 🔴 ${possessionString}\n` +
        `📊 Action Zone: 🔴 ${actionString}\n` +
        `${CSString}`,
        null,
        announcementColor,
        'bold',
        HaxNotification.NONE
    );
}

/* PLAYER FUNCTIONS */

function updateTeams() {
    players = room.getPlayerList();
    teamRed = players.filter((p) => p.team == Team.RED);
    teamBlue = players.filter((p) => p.team == Team.BLUE);
    teamSpec = players.filter((p) => p.team == Team.SPECTATORS);
}

function updateAdmins(excludedPlayerID = 0) {
    if (players.length != 0 && players.filter((p) => p.admin).length < maxAdmins) {
        let playerArray = players.filter((p) => p.id != excludedPlayerID && !p.admin);
        let arrayID = playerArray.map((player) => player.id);
        room.setPlayerAdmin(Math.min(...arrayID), true);
    }
}

function getRole(player) {
    return (
        !!masterList.find((a) => a == authArray[player.id][0]) * 2 +
        !!adminList.find((a) => a[0] == authArray[player.id][0]) * 1 +
        player.admin * 1
    );
}

function ghostKickHandle(oldP, newP) {
    var teamArrayId = getTeamArray(oldP.team).map((p) => p.id);
    teamArrayId.splice(teamArrayId.findIndex((id) => id == oldP.id), 1, newP.id);

    room.kickPlayer(oldP.id, 'Ghost kick', false);
    room.setPlayerTeam(newP.id, oldP.team);
    room.setPlayerAdmin(newP.id, oldP.admin);
    room.reorderPlayers(teamArrayId, true);

    if (oldP.team != Team.SPECTATORS && playSituation != Situation.STOP) {
        var discProp = room.getPlayerDiscProperties(oldP.id);
        room.setPlayerDiscProperties(newP.id, discProp);
    }
}

/* ACTIVITY FUNCTIONS */

function handleActivityPlayer(player) {
    let pComp = getPlayerComp(player);
    if (pComp != null) {
        pComp.inactivityTicks++;
        return pComp.inactivityTicks;
    }
    return 0;
}

function handleActivityPlayerTeamChange(changedPlayer) {
    if (changedPlayer.team == Team.SPECTATORS) {
        let pComp = getPlayerComp(changedPlayer);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivityStop() {
    for (let player of players) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
}

function handleActivity() {
    if (gameState == State.PLAY && players.length > 1) {
        var playerMaxInactivity = 0;
        for (let player of teamRed) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        for (let player of teamBlue) {
            var playerInactivity = handleActivityPlayer(player);
            playerMaxInactivity = Math.max(playerInactivity, playerMaxInactivity);
        }
        if (playerMaxInactivity >= maxInactivity * 60 * 60) {
            cancelGameVariable = true;
            room.stopGame();
            room.sendAnnouncement(
                '⚠️ Game was stopped due to inactivity !',
                null,
                announcementColor,
                'bold',
                HaxNotification.CHAT
            );
            handleActivityStop();
        }
    }
}

/* LINEUP FUNCTIONS */

function getStartingLineups() {
    var compositions = [[], []];
    for (let player of teamRed) {
        compositions[0].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    for (let player of teamBlue) {
        compositions[1].push(
            new PlayerComposition(player, authArray[player.id][0], [0], [])
        );
    }
    return compositions;
}

function handleLineupChangeTeamChange(changedPlayer) {
    if (gameState != State.STOP) {
        var playerLineup;
        if (changedPlayer.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[0][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[0].push(playerLineup);
            }
        } else if (changedPlayer.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            if (ind != -1) {
                // Player goes back in
                playerLineup = game.playerComp[1][ind];
                if (playerLineup.timeExit.includes(game.scores.time)) {
                    // gets subbed off then in at the exact same time -> no sub
                    playerLineup.timeExit = playerLineup.timeExit.filter((t) => t != game.scores.time);
                } else {
                    playerLineup.timeEntry.push(game.scores.time);
                }
            } else {
                playerLineup = new PlayerComposition(
                    changedPlayer,
                    authArray[changedPlayer.id][0],
                    [game.scores.time],
                    []
                );
                game.playerComp[1].push(playerLineup);
            }
        }
        if (teamRed.some((r) => r.id == changedPlayer.id)) {
            // player leaves red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (teamBlue.some((r) => r.id == changedPlayer.id)) {
            // player leaves blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[changedPlayer.id][0]);
            playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

function handleLineupChangeLeave(player) {
    if (playSituation != Situation.STOP) {
        if (player.team == Team.RED) {
            // player gets in red team
            var redLineupAuth = game.playerComp[0].map((p) => p.auth);
            var ind = redLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[0][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[0].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        } else if (player.team == Team.BLUE) {
            // player gets in blue team
            var blueLineupAuth = game.playerComp[1].map((p) => p.auth);
            var ind = blueLineupAuth.findIndex((auth) => auth == authArray[player.id][0]);
            var playerLineup = game.playerComp[1][ind];
            if (playerLineup.timeEntry.includes(game.scores.time)) {
                // gets subbed off then in at the exact same time -> no sub
                if (game.scores.time == 0) {
                    game.playerComp[1].splice(ind, 1);
                } else {
                    playerLineup.timeEntry = playerLineup.timeEntry.filter((t) => t != game.scores.time);
                }
            } else {
                playerLineup.timeExit.push(game.scores.time);
            }
        }
    }
}

/* STATS FUNCTIONS */

/* GK FUNCTIONS */

function handleGKTeam(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? teamRed : teamBlue;
    let playerGK = teamArray.reduce((prev, current) => {
        if (team == Team.RED) {
            return (prev?.position.x < current.position.x) ? prev : current
        } else {
            return (prev?.position.x > current.position.x) ? prev : current
        }
    }, null);
    let playerCompGK = getPlayerComp(playerGK);
    return playerCompGK;
}

function handleGK() {
    let redGK = handleGKTeam(Team.RED);
    if (redGK != null) {
        redGK.GKTicks++;
    }
    let blueGK = handleGKTeam(Team.BLUE);
    if (blueGK != null) {
        blueGK.GKTicks++;
    }
}

function getGK(team) {
    if (team == Team.SPECTATORS) {
        return null;
    }
    let teamArray = team == Team.RED ? game.playerComp[0] : game.playerComp[1];
    let playerGK = teamArray.reduce((prev, current) => {
        return (prev?.GKTicks > current.GKTicks) ? prev : current
    }, null);
    return playerGK;
}

function getCS(scores) {
    let playersNameCS = [];
    let redGK = getGK(Team.RED);
    let blueGK = getGK(Team.BLUE);
    if (redGK != null && scores.blue == 0) {
        playersNameCS.push(redGK.player.name);
    }
    if (blueGK != null && scores.red == 0) {
        playersNameCS.push(blueGK.player.name);
    }
    return playersNameCS;
}

function getCSString(scores) {
    let playersCS = getCS(scores);
    if (playersCS.length == 0) {
        return "🥅 No CS";
    } else if (playersCS.length == 1) {
        return `🥅 ${playersCS[0]} tuvo una CS.`;
    } else {
        return `🥅 ${playersCS[0]} and ${playersCS[1]} tuvo una CS.`;
    }
}

/* GLOBAL STATS FUNCTIONS */

function getLastTouchOfTheBall() {
    const ballPosition = room.getBallPosition();
    updateTeams();
    let playerArray = [];
    for (let player of players) {
        if (player.position != null) {
            var distanceToBall = pointDistance(player.position, ballPosition);
            if (distanceToBall < triggerDistance) {
                if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
                playerArray.push([player, distanceToBall]);
            }
        }
    }
    if (playerArray.length != 0) {
        let playerTouch = playerArray.sort((a, b) => a[1] - b[1])[0][0];
        if (lastTeamTouched == playerTouch.team || lastTeamTouched == Team.SPECTATORS) {
            if (lastTouches[0] == null || (lastTouches[0] != null && lastTouches[0].player.id != playerTouch.id)) {
                game.touchArray.push(
                    new BallTouch(
                        playerTouch,
                        game.scores.time,
                        getGoalGame(),
                        ballPosition
                    )
                );
                lastTouches[0] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 1,
                    getGoalGame()
                );
                lastTouches[1] = checkGoalKickTouch(
                    game.touchArray,
                    game.touchArray.length - 2,
                    getGoalGame()
                );
            }
        }
        lastTeamTouched = playerTouch.team;
    }
}

function getBallSpeed() {
    var ballProp = room.getDiscProperties(0);
    return Math.sqrt(ballProp.xspeed ** 2 + ballProp.yspeed ** 2) * speedCoefficient;
}

function getGameStats() {
    if (playSituation == Situation.PLAY && gameState == State.PLAY) {
        lastTeamTouched == Team.RED ? possession[0]++ : possession[1]++;
        var ballPosition = room.getBallPosition();
        ballPosition.x < 0 ? actionZoneHalf[0]++ : actionZoneHalf[1]++;
    }
}

/* GOAL ATTRIBUTION FUNCTIONS */

function getGoalAttribution(team) {
    var goalAttribution = Array(2).fill(null);
    if (lastTouches[0] != null) {
        if (lastTouches[0].player.team == team) {
            // Direct goal scored by player
            if (lastTouches[1] != null && lastTouches[1].player.team == team) {
                goalAttribution = [lastTouches[0].player, lastTouches[1].player];
            } else {
                goalAttribution = [lastTouches[0].player, null];
            }
        } else {
            // Own goal
            goalAttribution = [lastTouches[0].player, null];
        }
    }
    return goalAttribution;
}

function getGoalString(team) {
    var goalString;
    var scores = game.scores;
    var goalAttribution = getGoalAttribution(team);
    if (goalAttribution[0] != null) {
        if (goalAttribution[0].team == team) {
            if (goalAttribution[1] != null && goalAttribution[1].team == team) {
                goalString = `⚽ ${getTimeGame(scores.time)} Golazo de ${goalAttribution[0].name} ! Asistencia de ${goalAttribution[1].name}. Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(
                        scores.time,
                        team,
                        goalAttribution[0],
                        goalAttribution[1]
                    )
                );
            } else {
                goalString = `⚽ ${getTimeGame(scores.time)} Golazo de ${goalAttribution[0].name} ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
                game.goals.push(
                    new Goal(scores.time, team, goalAttribution[0], null)
                );
            }
        } else {
            goalString = `😂 ${getTimeGame(scores.time)} Autogol de ${goalAttribution[0].name} ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
            game.goals.push(
                new Goal(scores.time, team, goalAttribution[0], null)
            );
        }
    } else {
        goalString = `⚽ ${getTimeGame(scores.time)} Golazo para ${team == Team.RED ? 'red' : 'blue'} team ! Velocidad : ${ballSpeed.toFixed(2)}km/h.`;
        game.goals.push(
            new Goal(scores.time, team, null, null)
        );
    }

    return goalString;
}

/* GET STATS FUNCTIONS */

function actionReportCountTeam(goals, team) {
    let playerActionSummaryTeam = [];
    let indexTeam = team == Team.RED ? 0 : 1;
    let indexOtherTeam = team == Team.RED ? 1 : 0;
    for (let goal of goals[indexTeam]) {
        if (goal[0] != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == goal[0].id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[0].id);
                playerActionSummaryTeam[index][1]++;
            } else {
                playerActionSummaryTeam.push([goal[0], 1, 0, 0]);
            }
            if (goal[1] != null) {
                if (playerActionSummaryTeam.find(a => a[0].id == goal[1].id)) {
                    let index = playerActionSummaryTeam.findIndex(a => a[0].id == goal[1].id);
                    playerActionSummaryTeam[index][2]++;
                } else {
                    playerActionSummaryTeam.push([goal[1], 0, 1, 0]);
                }
            }
        }
    }
    if (goals[indexOtherTeam].length == 0) {
        let playerCS = getGK(team)?.player;
        if (playerCS != null) {
            if (playerActionSummaryTeam.find(a => a[0].id == playerCS.id)) {
                let index = playerActionSummaryTeam.findIndex(a => a[0].id == playerCS.id);
                playerActionSummaryTeam[index][3]++;
            } else {
                playerActionSummaryTeam.push([playerCS, 0, 0, 1]);
            }
        }
    }

    playerActionSummaryTeam.sort((a, b) => (a[1] + a[2] + a[3]) - (b[1] + b[2] + b[3]));
    return playerActionSummaryTeam;
}

/* FETCH FUNCTIONS */

function fetchGametimeReport(game) {
    var fieldGametimeRed = {
        name: '🔴        **RED TEAM STATS**',
        value: '⌛ __**Game Time:**__\n\n',
        inline: true,
    };
    var fieldGametimeBlue = {
        name: '🔵       **BLUE TEAM STATS**',
        value: '⌛ __**Game Time:**__\n\n',
        inline: true,
    };
    var redTeamTimes = game.playerComp[0].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[0].length; i++) {
        var player = game.playerComp[0][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                redTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                redTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }
    var blueTeamTimes = game.playerComp[1].map((p) => [p.player, 0]);
    for (let i = 0; i < game.playerComp[1].length; i++) {
        var player = game.playerComp[1][i];
        for (let j = 0; j < player.timeEntry.length; j++) {
            if (player.timeExit.length < j + 1) {
                blueTeamTimes[i][1] += game.scores.time - player.timeEntry[j];
            } else {
                blueTeamTimes[i][1] += player.timeExit[j] - player.timeEntry[j];
            }
        }
    }

    for (let time of redTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeRed.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeRed.value += `\n${blueTeamTimes.length - redTeamTimes.length > 0 ? '\n'.repeat(blueTeamTimes.length - redTeamTimes.length) : ''
        }`;
    fieldGametimeRed.value += '=====================';

    for (let time of blueTeamTimes) {
        var minutes = getMinutesReport(time[1]);
        var seconds = getSecondsReport(time[1]);
        fieldGametimeBlue.value += `> **${time[0].name}:** ${minutes > 0 ? `${minutes}m` : ''}` +
            `${seconds > 0 || minutes == 0 ? `${seconds}s` : ''}\n`;
    }
    fieldGametimeBlue.value += `\n${redTeamTimes.length - blueTeamTimes.length > 0 ? '\n'.repeat(redTeamTimes.length - blueTeamTimes.length) : ''
        }`;
    fieldGametimeBlue.value += '=====================';

    return [fieldGametimeRed, fieldGametimeBlue];
}

function fetchActionsSummaryReport(game) {
    var fieldReportRed = {
        name: '🔴        **RED TEAM STATS**',
        value: '📊 __**Player Stats:**__\n\n',
        inline: true,
    };
    var fieldReportBlue = {
        name: '🔵       **BLUE TEAM STATS**',
        value: '📊 __**Player Stats:**__\n\n',
        inline: true,
    };
    var goals = [[], []];
    for (let goal of game.goals) {
        goals[goal.team - 1].push([goal.striker, goal.assist]);
    }
    var redActions = actionReportCountTeam(goals, Team.RED);
    if (redActions.length > 0) {
        for (let act of redActions) {
            fieldReportRed.value += `> **${act[0].team != Team.RED ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }
    var blueActions = actionReportCountTeam(goals, Team.BLUE);
    if (blueActions.length > 0) {
        for (let act of blueActions) {
            fieldReportBlue.value += `> **${act[0].team != Team.BLUE ? '[OG] ' : ''}${act[0].name}:**` +
                `${act[1] > 0 ? ` ${act[1]}G` : ''}` +
                `${act[2] > 0 ? ` ${act[2]}A` : ''}` +
                `${act[3] > 0 ? ` ${act[3]}CS` : ''}\n`;
        }
    }

    fieldReportRed.value += `\n${blueActions.length - redActions.length > 0 ? '\n'.repeat(blueActions.length - redActions.length) : ''
        }`;
    fieldReportRed.value += '=====================';

    fieldReportBlue.value += `\n${redActions.length - blueActions.length > 0 ? '\n'.repeat(redActions.length - blueActions.length) : ''
        }`;
    fieldReportBlue.value += '=====================';

    return [fieldReportRed, fieldReportBlue];
}

function fetchSummaryEmbed(game) {
    var fetchEndgame = [fetchGametimeReport, fetchActionsSummaryReport];
    var logChannel = gameWebhook;
    var fields = [
        {
            name: '🔴        **RED TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
        {
            name: '🔵       **BLUE TEAM STATS**',
            value: '=====================\n\n',
            inline: true,
        },
    ];
    for (let i = 0; i < fetchEndgame.length; i++) {
        var fieldsReport = fetchEndgame[i](game);
        fields[0].value += fieldsReport[0].value + '\n\n';
        fields[1].value += fieldsReport[1].value + '\n\n';
    }
    fields[0].value = fields[0].value.substring(0, fields[0].value.length - 2);
    fields[1].value = fields[1].value.substring(0, fields[1].value.length - 2);

    var possR = possession[0] / (possession[0] + possession[1]);
    var possB = 1 - possR;
    var possRString = (possR * 100).toFixed(0).toString();
    var possBString = (possB * 100).toFixed(0).toString();
    var zoneR = actionZoneHalf[0] / (actionZoneHalf[0] + actionZoneHalf[1]);
    var zoneB = 1 - zoneR;
    var zoneRString = (zoneR * 100).toFixed(0).toString();
    var zoneBString = (zoneB * 100).toFixed(0).toString();
    var win = (game.scores.red > game.scores.blue) * 1 + (game.scores.blue > game.scores.red) * 2;
    var objectBodyWebhook = {
        embeds: [
            {
                title: `📝 MATCH REPORT #${getIdReport()}`,
                description:
                    `**${getTimeEmbed(game.scores.time)}** ` +
                    (win == 1 ? '**Red Team** ' : 'Red Team ') + game.scores.red +
                    ' - ' +
                    game.scores.blue + (win == 2 ? ' **Blue Team**' : ' Blue Team') +
                    '\n```c\nPossession: ' + possRString + '% - ' + possBString + '%' +
                    '\nAction Zone: ' + zoneRString + '% - ' + zoneBString + '%\n```\n\n',
                color: 9567999,
                fields: fields,
                footer: {
                    text: `Recording: ${getRecordingName(game)}`,
                },
                timestamp: new Date().toISOString(),
            },
        ],
        username: roomName
    };
    if (logChannel != '') {
        fetch(logChannel, {
            method: 'POST',
            body: JSON.stringify(objectBodyWebhook),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
}

/* EVENTS */

/* PLAYER MOVEMENT */

room.onPlayerJoin = function (player) {
    authArray[player.id] = [player.auth, player.conn];
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ➡️ JOIN (${players.length + 1}/${maxPlayers})\n**` +
                    `${player.name}** [${authArray[player.id][0]}] {${authArray[player.id][1]}}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    room.sendAnnouncement(
        `❤ Bienvenido ${player.name} a la sala. BUSCAMOS ADMINS PARA LA SALA INFO AQUI > https://discord.gg/qg3PKnXkHA \n sala creada por ardilla ❤`,
        player.id,
        welcomeColor,
        'bold',
        HaxNotification.CHAT
    );
    updateTeams();
    updateAdmins();
    if (masterList.findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Master ${player.name} Se conectó a la sala !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    } else if (adminList.map((a) => a[0]).findIndex((auth) => auth == player.auth) != -1) {
        room.sendAnnouncement(
            `Admin ${player.name} Se conectó a la sala !`,
            null,
            announcementColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(player.id, true);
    }
    var sameAuthCheck = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
    if (sameAuthCheck.length > 0 && !debugMode) {
        var oldPlayerArray = players.filter((p) => p.id != player.id && authArray[p.id][0] == player.auth);
        for (let oldPlayer of oldPlayerArray) {
            ghostKickHandle(oldPlayer, player);
        }
    }
};

room.onPlayerTeamChange = function (changedPlayer, byPlayer) {
    handleLineupChangeTeamChange(changedPlayer);
    updateTeams();
    handleActivityPlayerTeamChange(changedPlayer);
};

room.onPlayerLeave = function (player) {
    setTimeout(() => {
        if (!kickFetchVariable) {
            if (roomWebhook != '') {
                var stringContent = `[${getDate()}] ⬅️ LEAVE (${players.length}/${maxPlayers})\n**${player.name}**` +
                    `[${authArray[player.id][0]}] {${authArray[player.id][1]}}`;
                fetch(roomWebhook, {
                    method: 'POST',
                    body: JSON.stringify({
                        content: stringContent,
                        username: roomName,
                    }),
                    headers: {
                        'Content-Type': 'application/json',
                    },
                }).then((res) => res);
            }
        } else kickFetchVariable = false;
    }, 10);
    handleLineupChangeLeave(player);
    updateTeams();
    updateAdmins();
};

room.onPlayerKicked = function (kickedPlayer, reason, ban, byPlayer) {
    kickFetchVariable = true;
    if (roomWebhook != '') {
        var stringContent = `[${getDate()}] ⛔ ${ban ? 'BAN' : 'KICK'} (${players.length}/${maxPlayers})\n` +
            `**${kickedPlayer.name}** [${authArray[kickedPlayer.id][0]}] {${authArray[kickedPlayer.id][1]}} was ${ban ? 'banned' : 'kicked'}` +
            `${byPlayer != null ? ' by **' + byPlayer.name + '** [' + authArray[byPlayer.id][0] + '] {' + authArray[byPlayer.id][1] + '}' : ''}`
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: stringContent,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((ban && ((byPlayer != null &&
        (byPlayer.id == kickedPlayer.id || getRole(byPlayer) < Role.MASTER)) || getRole(kickedPlayer) == Role.MASTER)) || disableBans
    ) {
        room.clearBan(kickedPlayer.id);
        return;
    }
    if (byPlayer != null && getRole(byPlayer) < Role.ADMIN_PERM) {
        room.sendAnnouncement(
            'You are not allowed to kick/ban players !',
            byPlayer.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setPlayerAdmin(byPlayer.id, false);
        return;
    }
    if (ban) banList.push([kickedPlayer.name, kickedPlayer.id]);
};

/* PLAYER ACTIVITY */

room.onPlayerChat = function (player, message) {
    let msgArray = message.split(/ +/);
    if (!hideClaimMessage || msgArray[0] != '!claim') {
        if (roomWebhook != '')
            fetch(roomWebhook, {
                method: 'POST',
                body: JSON.stringify({
                    content: `[${getDate()}] 💬 CHAT\n**${player.name}** : ${message.replace('@', '@ ')}`,
                    username: roomName,
                }),
                headers: {
                    'Content-Type': 'application/json',
                },
            }).then((res) => res);
    }
    if (msgArray[0][0] == '!') {
        let command = getCommand(msgArray[0].slice(1).toLowerCase());
        if (command != false && commands[command].roles <= getRole(player)) commands[command].function(player, message);
        else
            room.sendAnnouncement(
                `The command you tried to enter does not exist for you. Please enter '!help' to get the available commands to you.`,
                player.id,
                errorColor,
                'bold',
                HaxNotification.CHAT
            );
        return false;
    }
    if (msgArray[0].toLowerCase() == 't') {
        teamChat(player, message);
        return false;
    }
    if (msgArray[0].substring(0, 2) === '@@') {
        playerChat(player, message);
        return false;
    }
};

room.onPlayerActivity = function (player) {
    if (gameState !== State.STOP) {
        let pComp = getPlayerComp(player);
        if (pComp != null) pComp.inactivityTicks = 0;
    }
};

room.onPlayerBallKick = function (player) {
    if (playSituation != Situation.GOAL) {
        var ballPosition = room.getBallPosition();
        if (game.touchArray.length == 0 || player.id != game.touchArray[game.touchArray.length - 1].player.id) {
            if (playSituation == Situation.KICKOFF) playSituation = Situation.PLAY;
            lastTeamTouched = player.team;
            game.touchArray.push(
                new BallTouch(
                    player,
                    game.scores.time,
                    getGoalGame(),
                    ballPosition
                )
            );
            lastTouches[0] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 1,
                getGoalGame()
            );
            lastTouches[1] = checkGoalKickTouch(
                game.touchArray,
                game.touchArray.length - 2,
                getGoalGame()
            );
        }
    }
};

/* GAME MANAGEMENT */

room.onGameStart = function (byPlayer) {
    clearTimeout(startTimeout);
    if (byPlayer != null) clearTimeout(stopTimeout);
    game = new Game();
    possession = [0, 0];
    actionZoneHalf = [0, 0];
    gameState = State.PLAY;
    endGameVariable = false;
    goldenGoal = false;
    playSituation = Situation.KICKOFF;
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    calculateStadiumVariables();
};

room.onGameStop = function (byPlayer) {
    clearTimeout(stopTimeout);
    clearTimeout(unpauseTimeout);
    if (byPlayer != null) clearTimeout(startTimeout);
    game.rec = room.stopRecording();
    if (
        !cancelGameVariable && game.playerComp[0].length + game.playerComp[1].length > 0 &&
        (
            (game.scores.timeLimit != 0 &&
                ((game.scores.time >= 0.5 * game.scores.timeLimit &&
                    game.scores.time < 0.75 * game.scores.timeLimit &&
                    game.scores.red != game.scores.blue) ||
                    game.scores.time >= 0.75 * game.scores.timeLimit)
            ) ||
            endGameVariable
        )
    ) {
        fetchSummaryEmbed(game);
        if (fetchRecordingVariable) {
            setTimeout((gameEnd) => { fetchRecording(gameEnd); }, 500, game);
        }
    }
    cancelGameVariable = false;
    gameState = State.STOP;
    playSituation = Situation.STOP;
    updateTeams();
    handleActivityStop();
};

room.onGamePause = function (byPlayer) {
    if (mentionPlayersUnpause && gameState == State.PAUSE) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Juego pausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game paused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
    clearTimeout(unpauseTimeout);
    gameState = State.PAUSE;
};

room.onGameUnpause = function (byPlayer) {
    unpauseTimeout = setTimeout(() => {
        gameState = State.PLAY;
    }, 2000);
    if (mentionPlayersUnpause) {
        if (byPlayer != null) {
            room.sendAnnouncement(
                `Juego despausado por ${byPlayer.name} !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        } else {
            room.sendAnnouncement(
                `Game unpaused !`,
                null,
                defaultColor,
                'bold',
                HaxNotification.NONE
            );
        }
    }
};

room.onTeamGoal = function (team) {
    const scores = room.getScores();
    game.scores = scores;
    playSituation = Situation.GOAL;
    ballSpeed = getBallSpeed();
    var goalString = getGoalString(team);
    room.sendAnnouncement(
        goalString,
        null,
        team == Team.RED ? redColor : blueColor,
        null,
        HaxNotification.CHAT
    );
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] ${goalString}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
    if ((scores.scoreLimit != 0 && (scores.red == scores.scoreLimit || scores.blue == scores.scoreLimit)) || goldenGoal) {
        endGame(team);
        goldenGoal = false;
        stopTimeout = setTimeout(() => {
            room.stopGame();
        }, 1000);
    }
};

room.onPositionsReset = function () {
    lastTouches = Array(2).fill(null);
    lastTeamTouched = Team.SPECTATORS;
    playSituation = Situation.KICKOFF;
};

/* MISCELLANEOUS */

room.onRoomLink = function (url) {
    console.log(`${url}\nmasterPassword : ${masterPassword}`);
    if (roomWebhook != '') {
        fetch(roomWebhook, {
            method: 'POST',
            body: JSON.stringify({
                content: `[${getDate()}] 🔗 LINK ${url}\nmasterPassword : ${masterPassword}`,
                username: roomName,
            }),
            headers: {
                'Content-Type': 'application/json',
            },
        }).then((res) => res);
    }
};

room.onPlayerAdminChange = function (changedPlayer, byPlayer) {
    updateTeams();
    if (!changedPlayer.admin && getRole(changedPlayer) >= Role.ADMIN_TEMP) {
        room.setPlayerAdmin(changedPlayer.id, true);
        return;
    }
    updateAdmins(byPlayer != null && !changedPlayer.admin && changedPlayer.id == byPlayer.id ? changedPlayer.id : 0);
};

room.onKickRateLimitSet = function (min, rate, burst, byPlayer) {
    if (byPlayer != null) {
        room.sendAnnouncement(
            `It is not allowed to change the kickrate limit. It must stay at "6-0-0".`,
            player.id,
            errorColor,
            'bold',
            HaxNotification.CHAT
        );
        room.setKickRateLimit(6, 0, 0);
    }
};

room.onStadiumChange = function (newStadiumName, byPlayer) {
    checkStadiumVariable = true;
};

room.onGameTick = function () {
    checkTime();
    getLastTouchOfTheBall();
    getGameStats();
    handleActivity();
};
